// Code generated by go-bindata.
// sources:
// client/bootstrap/daemon-down.sh
// client/bootstrap/daemon-up.sh
// client/bootstrap/docker.sh
// client/bootstrap/keygen.sh
// client/bootstrap/token.sh
// DO NOT EDIT!

package client

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientBootstrapDaemonDownSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xc1\x4a\xc3\x40\x10\xc6\xf1\xfb\x3c\xc5\x47\xdb\xeb\xe6\x0d\x72\x88\x36\x88\x60\x57\x28\x7a\xf0\xd4\xae\xd9\xd9\x74\x48\x33\x5b\x67\xb7\xa8\x6f\x2f\x22\x42\xe8\xfd\xe3\xff\xfb\xd6\xb8\x0b\x45\x06\x94\xc1\xe4\x52\x91\xb2\xe1\xdd\x44\x47\xd1\x11\x31\x7f\x2a\xea\x89\x11\x03\xcf\x59\x1b\xa2\xc2\x15\x8e\x89\xb6\x5d\xbf\x7b\xf6\x07\xdf\xed\xfa\x56\x94\xad\x4a\x70\x7f\x23\xa2\x35\xee\x4f\x3c\x4c\x90\x84\x70\x36\x0e\xf1\x1b\x76\x55\x15\x1d\x1b\xea\x9e\xf6\x7d\xb7\x7d\x3b\xec\x5f\xbd\x7f\xf4\x0f\xed\xb1\x5c\x63\x46\xcc\xc3\xc4\x86\x4b\x81\xfb\x80\x73\x49\xce\x95\x0d\x2b\x0d\x33\xb7\x9b\x05\xb5\x3a\xfe\xd6\x5f\xc2\xc4\xe0\x2f\x29\xf5\xff\x63\x43\xcb\x8c\xcd\x70\x09\x9b\x1b\x8a\x7e\x02\x00\x00\xff\xff\x8a\x49\xa7\x95\xe9\x00\x00\x00")

func clientBootstrapDaemonDownShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDaemonDownSh,
		"client/bootstrap/daemon-down.sh",
	)
}

func clientBootstrapDaemonDownSh() (*asset, error) {
	bytes, err := clientBootstrapDaemonDownShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/daemon-down.sh", size: 233, mode: os.FileMode(420), modTime: time.Unix(1514021421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapDaemonUpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\xd8\xca\x2e\xee\x25\x14\x2f\x2d\x0a\xa4\x17\xf8\xc1\x4d\x8c\x9c\x91\x5a\x3e\xd8\x2e\x8a\xa0\x2d\x1c\x9a\x5a\x5b\x8c\x25\x52\xe5\xae\xac\xdc\xfd\xfa\x82\xf2\x87\x7c\xd7\x7b\xb2\x45\xee\xce\xec\x0e\x67\x06\xf0\x9b\x26\x6b\x80\x4c\xb0\x35\xc3\xd6\x07\xd8\x04\xeb\x76\xd6\xed\xa0\xa9\x81\x0b\x84\x5c\x63\xe5\x5d\x2a\x04\x21\x83\x44\x21\x1e\xe6\x8b\xd5\xe8\x47\x12\x1f\xc7\x93\xd9\x3c\x5b\x67\xe3\xd9\x64\x64\x1d\x06\xb6\x5a\x1e\x8b\xc5\x87\x79\xb6\x1a\x4f\xb3\xc9\x62\xdd\x15\xbf\xbb\x7d\xf7\x56\x4c\x67\xe3\x4f\x93\xf5\x62\xf2\x30\x5f\x4e\x57\xf3\xc5\x97\x51\xb3\x31\xa5\x6e\x9c\x29\x6a\x9d\xab\x13\x80\x10\x03\xf8\x50\xa0\xd9\x83\xdd\x82\x2e\x03\xea\xfc\x11\x42\xe3\x9c\x75\xbb\x54\x8c\x7f\x5f\x4c\xc6\x1f\xbf\xac\x17\x7f\x64\xd9\x34\xfb\x34\xfa\x4a\x4d\xee\x21\xf7\x66\x8f\x01\x6a\x02\xf9\x2f\x48\xb9\xb5\x25\x63\x80\xc4\xe9\x0a\x47\xc3\xab\x21\x93\xaf\x11\x7d\xa5\xf7\x08\xf8\xdd\x12\xc7\x1d\x73\xdf\xba\x54\xd8\x2d\xfc\x05\x3f\x80\x7c\x82\x64\xf8\x82\x23\x81\x7f\xde\x47\x19\x9c\x00\x00\x40\x53\x78\x48\x3e\xdb\xb2\x8c\xcd\x17\x14\xe3\x1d\xeb\xb8\x41\xd2\x55\x5d\x4f\x15\x2a\x90\x5b\x78\x89\x2a\xb6\xf6\x7d\x1c\xe6\xa1\x29\xcb\x4e\xe4\x52\x33\x12\xc3\x49\x85\x8b\xe6\xcf\xf6\x8b\xb5\xc3\x97\x2a\x46\x94\x59\x5c\xe9\x21\xf8\x6f\x68\x18\x72\x1b\xd0\xb0\x0f\x8f\xa2\xda\xe7\x36\x80\xac\x61\x78\x3f\x9f\x4d\x54\x7d\x2c\x88\x0d\x8b\xc6\xf5\x33\x43\x6b\xb9\x00\x6d\x0c\x12\x01\xfb\x6e\x9c\xc2\x13\x9f\x79\x29\xfe\x30\x68\x97\x43\xc0\x12\x0f\xda\xf5\x24\x16\x09\xa4\x18\x00\x17\x96\xc0\x12\x38\x8c\x28\x3a\x3c\xc2\x06\x8d\x6e\x08\xa1\x45\x68\x63\x47\xef\xa4\xc8\xb1\x41\xd0\x9b\x12\x81\x58\x07\x16\x83\x0e\x9c\xd8\xd7\xfd\x54\x04\xb1\xf2\x34\x4a\x0a\x53\xbe\x21\xd0\x25\xf9\xae\x22\xf8\x03\x06\xb2\xba\x7c\x23\x06\x50\x30\xd7\x74\xa7\x54\xdb\xb6\x69\x79\x28\x52\xeb\x55\xed\x89\x49\xe5\xde\xb1\xc4\xef\xb5\x27\x94\x5c\xa0\x3c\xee\x23\x8f\xfb\x48\xe7\x59\xe2\x01\x9d\x64\x2f\xb5\xbc\xf0\xa6\x05\x57\xa5\x18\x5c\x11\x06\x34\xbe\xaa\xd0\xe5\x98\x5f\xd3\x7d\xab\x91\xf5\xd3\x93\x4f\x77\x96\x8b\x66\x13\x69\x7f\xba\x7d\xfb\x8b\xba\xfd\x55\xdd\xfe\xac\x72\xdf\x11\x34\x74\xa1\xb5\xee\xfc\x6f\xeb\x83\x34\x56\x89\x01\x8c\x09\x34\x04\xa4\xa6\xe4\x37\x47\x0d\xfb\x57\x29\x34\x41\xf0\x9e\xcf\x2f\x73\x92\x23\x60\xe5\x19\xe1\x50\xd3\x73\x77\x84\xc6\x81\xcc\x41\xca\x50\xc1\xdf\x9d\x0b\x65\x0d\xc9\x30\xc6\x2f\xb9\x8b\xf9\x3b\x9f\x1e\x40\x1d\x74\x50\xa1\x71\xea\xd8\x9a\x46\x41\xee\x5e\x3b\xec\x5b\x3a\x07\xdd\x29\x5d\xd7\xaa\xb3\xc6\xe9\x02\x21\x66\x7c\x35\x1d\xaf\x8f\x31\x1b\xdd\x70\x68\xf0\xa6\xbf\x8e\x6d\xa3\xae\xb9\x3f\x5b\x2e\xef\xd7\x9f\xb3\xf9\x9f\xd9\xfa\x7e\xbe\x5c\x2d\x47\x37\x17\x58\x95\x12\x15\x6a\xef\x7c\xeb\xd6\xf1\x9b\x2e\x48\x32\x86\x19\x92\x67\x69\x3e\xdd\x25\xff\x8b\x44\x12\x2d\xfe\xca\xd0\x95\x6f\x1c\xd3\xc9\xdb\xe7\x94\x00\xf9\x6b\x6f\x1a\xed\xce\x82\x5b\x16\xff\x05\x00\x00\xff\xff\x2a\xb7\x12\xe4\x1e\x05\x00\x00")

func clientBootstrapDaemonUpShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDaemonUpSh,
		"client/bootstrap/daemon-up.sh",
	)
}

func clientBootstrapDaemonUpSh() (*asset, error) {
	bytes, err := clientBootstrapDaemonUpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/daemon-up.sh", size: 1310, mode: os.FileMode(493), modTime: time.Unix(1519623401, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5b\x6b\xdc\x3e\x10\xc5\xdf\xf5\x29\x4e\xb2\x4b\x2e\x10\xdb\x49\xf8\xf3\x7f\x68\x48\xa1\x4d\x42\x29\x0d\x04\xf6\xf2\x5c\xb4\xd6\x68\x2d\xe2\x95\x5c\xcd\x38\xdb\xa5\xf4\xbb\x17\x6b\x6d\xb7\x69\xd3\x8b\x9f\x64\xcd\x99\xd1\x99\xdf\xcc\xe4\xa0\x58\x39\x5f\x70\xa5\xd4\x04\x6f\x43\x10\x96\xa8\x1b\x86\xc6\x46\x97\x95\xf3\x04\x1b\x22\x4c\x28\x1f\x29\x42\x7b\xd3\x1f\xb3\x32\x6c\x9a\xc0\x94\xab\x09\x16\x95\x63\x38\x46\x13\x49\x64\x07\x5d\x37\x95\xce\xf1\xde\xb3\xe8\xba\x66\x94\x6d\xac\x11\x7c\xbd\x83\xb3\x70\x02\x13\x88\xfd\xb1\x80\x3e\x3b\x96\x94\x4f\x2c\x64\x10\x3c\x96\xab\xd6\x4b\x8b\x8b\xff\xf3\xf3\xff\xce\x10\xe9\x53\xeb\x22\x31\xb8\x35\x21\xd9\xd0\xb0\xb4\x05\x0b\x35\x9c\x2b\xc5\x24\xc8\x48\xa9\xdb\x87\x9b\x0f\x77\xb3\x8f\xf3\x87\xe5\xec\xe6\xee\x7a\x4d\x92\xef\x3d\xe6\x65\xd8\x0c\xc1\xdb\xbb\xf9\xe2\xfa\xb8\x90\x4d\x53\xac\x49\xb2\x5e\xc0\xd5\x71\xd7\xf6\x4d\x45\xe5\x63\xe7\x6e\x68\x33\x92\x36\x3b\xb8\x7d\x07\x64\x72\xe5\x2c\x2a\xcd\xd5\x20\xb8\x7c\x5d\x18\x7a\x2a\x7c\x5b\xd7\x57\x90\x8a\xbc\x02\xd0\x35\x24\x38\x57\xd6\x5d\x29\x65\x49\xca\xca\xba\x9a\x4e\x4e\xf1\x25\x45\x27\x78\x13\xd7\xfc\xaa\x3f\x03\xd3\x0b\x70\x68\x63\x49\x58\xce\xee\xbf\xdf\x5e\xc2\x10\x8b\xf3\x5a\x5c\xf0\xe8\x2a\xe4\x29\x38\x38\x48\x34\x5f\x7e\xbf\xfb\x12\xaa\xa4\xc9\x2c\xcf\xef\xbb\x57\xb2\x80\xc3\xe9\xe5\xe1\xde\x62\x3d\xd4\xd9\xae\x49\xfe\x56\x27\x69\xb2\x87\x94\x8e\xe9\x45\x5f\x81\x69\x54\x45\x92\x36\x7a\xec\x23\x5d\xdf\x5f\x3b\x9c\xef\x48\x06\x50\x2f\x4e\xdc\x59\x1c\x9c\xfc\x06\xe7\xe9\x0f\x3e\x26\x58\xc4\x1d\x24\xc0\x84\xad\xaf\x83\x36\x68\xd9\xf9\x75\xbf\x50\x31\xd9\x3b\xeb\x95\x2b\xb2\x21\x12\x22\x71\x88\xd2\x89\x24\x0c\xf3\x1b\x52\x46\x8e\xe3\x6c\x30\x7d\xb6\x3a\xe3\x6f\xb7\x2c\x3f\xf3\xa8\x9e\x45\x7f\x45\xa1\x1b\xc9\x3a\x5c\x6d\x63\xb4\x10\x8e\x8e\xc6\x9b\x6c\xdc\xa4\x64\x63\xcc\xf8\x27\x1b\x7f\x34\x60\x9d\xb2\x4e\xa9\x34\x2b\xa6\xf8\xe4\x4a\x1a\x90\xb2\xe8\x28\xea\x5b\x00\x00\x00\xff\xff\x81\xf7\xdc\x13\xdd\x03\x00\x00")

func clientBootstrapDockerShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDockerSh,
		"client/bootstrap/docker.sh",
	)
}

func clientBootstrapDockerSh() (*asset, error) {
	bytes, err := clientBootstrapDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/docker.sh", size: 989, mode: os.FileMode(493), modTime: time.Unix(1519622708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xdc\x30\x10\x46\xef\xf3\x2b\xbe\xb0\x81\x5c\x2a\xef\xbd\xa1\x0b\x6d\x13\xda\x3d\x74\x13\x68\x7a\x2a\xc5\x68\xad\x71\x34\xd8\x91\x8c\x66\xdc\xad\x2f\xfd\xed\xc5\xeb\xa5\x24\x64\x2f\xd1\x55\x6f\x78\x4f\x9a\xd5\xc5\x7a\x2f\x69\xad\x91\x68\x85\xfb\x92\xc3\xd8\xb0\xc2\x63\x18\xf7\xbd\x34\x6e\x28\xf2\xdb\x1b\xa3\xe3\xc9\x0d\x5e\x0a\x7c\x0a\xc8\xa3\x0d\xa3\x29\x2c\xf2\x89\x9b\xef\x2b\x22\x65\x83\x63\xa2\xed\x4d\x7d\x73\xfb\xfd\x61\xbb\xfb\xf8\xb0\xbd\xdb\x7d\xb8\xfc\x7a\xf7\xed\x76\x5d\xa9\xc6\xb5\x84\xba\xa8\xaf\x25\x71\x31\xf1\x75\xe0\xa1\xcf\x13\xdd\xff\xf8\x54\xbf\x71\xa6\x1a\xc6\xfd\x9c\xfc\x39\x72\xd3\x41\x5a\x04\x56\x93\xe4\x4d\x72\x42\x2b\x3d\xc3\xf7\x85\x7d\x98\xc0\x7f\x44\x4d\xdf\x93\xb4\xf8\x09\xd7\xe2\xf2\xa5\x09\xbf\xae\xe7\x87\x24\x02\x80\x23\x73\x71\xa4\x5e\x37\xbd\x20\xe7\xb3\xc2\xb6\x7d\xf6\x01\x08\x99\x35\xd9\x22\x7c\x87\x27\xdf\x31\xc4\xaa\xff\xb8\x6a\x74\x1d\x4f\x8f\x9c\xe0\xa6\x73\x25\x9b\x73\xd6\xe3\x78\x2b\xd7\xc4\xbd\x32\x2d\xda\x2f\x9c\xb8\x9c\xd6\x82\x83\x58\x44\xca\x18\xbc\xea\x21\x97\xb0\x08\x9f\xcb\x5e\x9b\x9c\xa1\xa8\x87\xdb\xe1\xea\x8a\x5a\x21\x3a\xe1\xda\xf8\x84\x47\xb1\x38\xee\xab\x26\x3f\x61\xb3\xc1\xdf\x65\x09\x5d\xca\x87\x54\xc7\xac\xa6\x44\x8d\xb7\xb3\xa9\xff\x02\x00\x00\xff\xff\x37\x00\x91\x4b\x4d\x02\x00\x00")

func clientBootstrapKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapKeygenSh,
		"client/bootstrap/keygen.sh",
	)
}

func clientBootstrapKeygenSh() (*asset, error) {
	bytes, err := clientBootstrapKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/keygen.sh", size: 589, mode: os.FileMode(493), modTime: time.Unix(1515346036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapTokenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x9e\x54\xe8\x29\xdd\xbb\x90\x43\xd0\x60\x82\x36\x11\x53\xf0\x22\x84\x6d\x32\x9a\x25\x76\x36\xee\xec\x5a\xfc\xf7\x12\x69\x34\xc7\x99\x6f\x3e\xde\xbc\xcd\x95\x3e\x5a\xd6\x32\x28\x25\x14\x90\x90\x52\x1b\xdc\x13\x93\x37\x81\x04\x86\xd1\x34\x05\x82\x1b\x89\xf1\xe6\x3c\xa2\x10\xce\x36\x0c\xc8\x9e\x4a\x78\xfa\x8c\x24\x41\x76\x2b\x07\x06\xbd\xa1\x93\xe3\x8b\x14\xc5\xf2\x3b\x6e\x1f\xcb\x9d\x92\xd8\x3b\xf4\xae\x1b\xc9\xc3\x47\x46\x92\xf8\x13\x5e\x15\x00\x24\x5f\xb8\x2e\xea\x7d\x7e\xa3\xcd\x34\xe9\xc1\x49\x58\x00\xcd\x0f\xb4\x0f\x55\xfd\x52\xb5\x45\xdd\x1c\x9a\x74\xfb\x77\xa3\x77\x22\x83\x1e\xd9\x9d\xb9\x9d\x67\xd9\xfe\x5b\x65\x95\x3f\x1f\xca\xac\xbd\xcb\xf2\x7d\x5d\xa5\xdb\xe0\x23\xad\xf0\x1c\x96\xfe\x46\x2e\xbb\x84\x38\xf8\xef\xc9\x59\x0e\xa9\x65\xf2\xc1\x9a\x0b\x8a\xc7\xee\xc3\x44\xee\x86\xc9\xf4\x7a\x41\xeb\x92\xea\x27\x00\x00\xff\xff\xef\xe0\x7d\x5a\x46\x01\x00\x00")

func clientBootstrapTokenShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapTokenSh,
		"client/bootstrap/token.sh",
	)
}

func clientBootstrapTokenSh() (*asset, error) {
	bytes, err := clientBootstrapTokenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/token.sh", size: 326, mode: os.FileMode(493), modTime: time.Unix(1519623403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/bootstrap/daemon-down.sh": clientBootstrapDaemonDownSh,
	"client/bootstrap/daemon-up.sh": clientBootstrapDaemonUpSh,
	"client/bootstrap/docker.sh": clientBootstrapDockerSh,
	"client/bootstrap/keygen.sh": clientBootstrapKeygenSh,
	"client/bootstrap/token.sh": clientBootstrapTokenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"bootstrap": &bintree{nil, map[string]*bintree{
			"daemon-down.sh": &bintree{clientBootstrapDaemonDownSh, map[string]*bintree{}},
			"daemon-up.sh": &bintree{clientBootstrapDaemonUpSh, map[string]*bintree{}},
			"docker.sh": &bintree{clientBootstrapDockerSh, map[string]*bintree{}},
			"keygen.sh": &bintree{clientBootstrapKeygenSh, map[string]*bintree{}},
			"token.sh": &bintree{clientBootstrapTokenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

