// Code generated by go-bindata.
// sources:
// client/bootstrap/daemon-down.sh
// client/bootstrap/daemon-up.sh
// client/bootstrap/docker.sh
// client/bootstrap/keygen.sh
// client/bootstrap/token.sh
// DO NOT EDIT!

package client

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientBootstrapDaemonDownSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xc1\x4a\xc3\x40\x10\xc6\xf1\xfb\x3c\xc5\x47\xdb\xeb\xe6\x0d\x72\x88\x36\x88\x60\x57\x28\x7a\xf0\xd4\xae\xd9\xd9\x74\x48\x33\x5b\x67\xb7\xa8\x6f\x2f\x22\x42\xe8\xfd\xe3\xff\xfb\xd6\xb8\x0b\x45\x06\x94\xc1\xe4\x52\x91\xb2\xe1\xdd\x44\x47\xd1\x11\x31\x7f\x2a\xea\x89\x11\x03\xcf\x59\x1b\xa2\xc2\x15\x8e\x89\xb6\x5d\xbf\x7b\xf6\x07\xdf\xed\xfa\x56\x94\xad\x4a\x70\x7f\x23\xa2\x35\xee\x4f\x3c\x4c\x90\x84\x70\x36\x0e\xf1\x1b\x76\x55\x15\x1d\x1b\xea\x9e\xf6\x7d\xb7\x7d\x3b\xec\x5f\xbd\x7f\xf4\x0f\xed\xb1\x5c\x63\x46\xcc\xc3\xc4\x86\x4b\x81\xfb\x80\x73\x49\xce\x95\x0d\x2b\x0d\x33\xb7\x9b\x05\xb5\x3a\xfe\xd6\x5f\xc2\xc4\xe0\x2f\x29\xf5\xff\x63\x43\xcb\x8c\xcd\x70\x09\x9b\x1b\x8a\x7e\x02\x00\x00\xff\xff\x8a\x49\xa7\x95\xe9\x00\x00\x00")

func clientBootstrapDaemonDownShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDaemonDownSh,
		"client/bootstrap/daemon-down.sh",
	)
}

func clientBootstrapDaemonDownSh() (*asset, error) {
	bytes, err := clientBootstrapDaemonDownShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/daemon-down.sh", size: 233, mode: os.FileMode(420), modTime: time.Unix(1514021421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapDaemonUpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x61\x8f\xda\x46\x10\xfd\xbe\xbf\x62\x6a\x88\xee\x4b\xd6\xbe\x4b\x55\x29\x25\xf2\x07\x37\xb1\x72\x28\xc1\x9c\x80\xaa\xaa\xae\x27\xb2\xd8\xc3\x79\x83\xbd\xeb\xee\x8c\x21\x77\xbf\xbe\x5a\x1b\x30\x44\xfd\x04\xde\x7d\xf3\xde\xcc\xdb\x37\x23\xf8\x43\x91\xce\x81\x72\xa7\x1b\x86\xad\x75\xb0\x71\xda\x3c\x6b\xf3\x0c\x6d\x03\x5c\x22\x14\x0a\x6b\x6b\x42\x21\x08\x19\x24\x0a\xf1\x29\x49\x67\xf3\x6c\xbd\x48\xbf\xa6\xc9\x32\x8d\xdf\x3c\xde\x3d\xd1\xe9\xf0\x61\xbe\x58\xc5\x6f\x1e\xdf\x3d\xd1\x19\x97\x25\xb3\x34\xd6\x06\x1d\x6b\x25\x7b\x32\x31\x9d\x25\x9f\xd3\xb8\xdd\xe4\x95\x6a\x4d\x5e\x36\xaa\x88\x8e\x88\xc9\xf8\x9a\x5e\x7c\x9c\x67\xab\x64\x9a\xa5\x8b\x9e\xfb\xfd\xed\xfb\x3b\x21\x46\xf0\xb1\xc4\x7c\x07\x7a\x0b\xaa\x72\xa8\x8a\x17\x70\xad\x31\xda\x3c\x87\x22\xf9\xba\x48\x93\x4f\x7f\xaf\x17\x7f\x66\xd9\x34\xfb\x1c\x7f\xa3\xb6\xb0\x50\xd8\x7c\x87\x0e\x1a\x02\xf9\x2f\x48\xb9\xd5\x15\xa3\x83\xc0\xa8\x1a\xe3\xf1\x45\xa7\xc1\x37\xcf\xbe\x52\x3b\x04\xfc\xa1\x89\xbd\x11\x85\x3d\x98\x50\xe8\x2d\x3c\xc2\x2f\x20\x5f\x21\x18\xff\xa4\x11\xc0\xd3\x07\xef\x95\x11\x00\x00\x98\x97\x16\x82\x2f\xba\xaa\x7c\xf1\x99\x25\xb7\x86\x95\x9f\x32\xe8\x50\x97\x5d\xb9\x1a\xe4\x16\x7e\x66\x15\x5b\xfd\xc1\x37\xf3\xd0\x56\x55\xf7\x12\x47\x8b\xce\x2f\x72\x35\x98\x07\x8d\x3b\x5f\x7d\xcd\xcc\x0f\xf0\xe0\xec\x77\xcc\x19\x0a\xed\x30\x67\xeb\x5e\x44\xbd\x2b\xb4\x03\xd9\xc0\xf8\x7e\x3e\x4b\xa3\xa6\x07\xf8\x82\x45\x6b\x86\x0e\xe1\xa0\xb9\x04\x95\xe7\x48\x04\x6c\x3b\xf1\xd2\x12\x9f\xc4\xc8\xff\x30\x28\x53\x80\xc3\x0a\xf7\xca\x0c\x22\x1a\x09\xa4\x18\x01\x97\x9a\x40\x13\x18\xf4\x2c\xca\xbd\xc0\x06\x73\xd5\x12\xc2\x01\xe1\xe0\x2b\x86\x70\x79\x8d\x0d\x82\xda\x54\x08\xc4\xca\xb1\x18\x75\xe4\xc4\xb6\x19\xba\x22\xf0\xc8\x63\x2b\x21\x4c\xf9\x86\x40\x55\x64\x3b\x84\xb3\x7b\x74\xa4\x55\xf5\x56\x8c\xa0\x64\x6e\x68\x12\x45\x87\xc3\x21\xac\xf6\x65\xa8\x6d\xd4\x58\x62\x8a\x0a\x6b\x58\xe2\x8f\xc6\x12\x4a\x2e\x51\xf6\xf3\xc8\x7e\x1e\x69\x2c\x4b\xdc\xa3\x91\x6c\xa5\x92\x67\xdd\xb0\xe4\xba\x12\xa3\x0b\x41\x87\xb9\xad\x6b\x34\x05\x16\x97\x72\xdf\x1b\x64\xf5\xfa\x6a\xc3\x67\xcd\x65\xbb\xf1\xb2\xef\x6e\xef\x7e\x8b\x6e\x7f\x8f\x6e\x7f\x8d\x0a\xdb\x09\xb4\x74\x96\xd5\xe6\xf4\x6f\x6b\x9d\xcc\x75\x24\x46\x90\x10\x28\x70\x48\x6d\xc5\x6f\x7b\x0f\x87\x57\x29\x15\x81\xb3\x96\x4f\x2f\x73\xb4\xc3\x61\x6d\x19\x61\xdf\xd0\x75\x24\x5c\x6b\x40\x16\x20\xa5\xab\xe1\x9f\x2e\x73\xb2\x81\x60\x7c\xb1\xa9\xc1\x24\x18\x5f\xef\x57\x70\x42\xee\x21\xda\x2b\x17\xb9\xd6\x44\x3d\x5d\xe8\x4d\x9a\xfc\xdf\xe1\x50\x12\x74\xb1\x0a\x26\x91\x6a\x9a\xa8\x0b\xcc\xf1\x0a\xc1\x2b\xac\xa6\xc9\xba\x57\x8f\x6f\xd8\xb5\x78\x33\x5c\xfb\xba\xf8\x58\x3e\x9c\x2e\x97\xf7\xeb\x2f\xd9\xfc\xaf\x6c\x7d\x3f\x5f\xae\x96\xf1\xcd\x99\x38\x0a\x89\xca\x68\x67\xec\xc1\xac\xfd\x37\x9d\xb9\xa4\x5f\xe9\x61\xcc\x6e\xa7\x8f\x77\x41\xbf\x1f\x81\xcf\xbb\xdc\xf7\x3b\x70\xd1\x6b\x6d\x5b\xc3\x74\x0c\xfa\x69\x65\x80\xec\x65\x50\x73\x65\x4e\xee\x6b\x16\xff\x05\x00\x00\xff\xff\x35\x4d\x79\x8f\x3e\x05\x00\x00")

func clientBootstrapDaemonUpShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDaemonUpSh,
		"client/bootstrap/daemon-up.sh",
	)
}

func clientBootstrapDaemonUpSh() (*asset, error) {
	bytes, err := clientBootstrapDaemonUpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/daemon-up.sh", size: 1342, mode: os.FileMode(493), modTime: time.Unix(1520155172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5b\x6b\xdc\x3e\x10\xc5\xdf\xf5\x29\x4e\xb2\x4b\x2e\x10\xdb\x49\xf8\xf3\x7f\x68\x48\xa1\x4d\x42\x29\x0d\x04\xf6\xf2\x5c\xb4\xd6\x68\x2d\xe2\x95\x5c\xcd\x38\xdb\xa5\xf4\xbb\x17\x6b\x6d\xb7\x69\xd3\x8b\x9f\x64\xcd\x99\xd1\x99\xdf\xcc\xe4\xa0\x58\x39\x5f\x70\xa5\xd4\x04\x6f\x43\x10\x96\xa8\x1b\x86\xc6\x46\x97\x95\xf3\x04\x1b\x22\x4c\x28\x1f\x29\x42\x7b\xd3\x1f\xb3\x32\x6c\x9a\xc0\x94\xab\x09\x16\x95\x63\x38\x46\x13\x49\x64\x07\x5d\x37\x95\xce\xf1\xde\xb3\xe8\xba\x66\x94\x6d\xac\x11\x7c\xbd\x83\xb3\x70\x02\x13\x88\xfd\xb1\x80\x3e\x3b\x96\x94\x4f\x2c\x64\x10\x3c\x96\xab\xd6\x4b\x8b\x8b\xff\xf3\xf3\xff\xce\x10\xe9\x53\xeb\x22\x31\xb8\x35\x21\xd9\xd0\xb0\xb4\x05\x0b\x35\x9c\x2b\xc5\x24\xc8\x48\xa9\xdb\x87\x9b\x0f\x77\xb3\x8f\xf3\x87\xe5\xec\xe6\xee\x7a\x4d\x92\xef\x3d\xe6\x65\xd8\x0c\xc1\xdb\xbb\xf9\xe2\xfa\xb8\x90\x4d\x53\xac\x49\xb2\x5e\xc0\xd5\x71\xd7\xf6\x4d\x45\xe5\x63\xe7\x6e\x68\x33\x92\x36\x3b\xb8\x7d\x07\x64\x72\xe5\x2c\x2a\xcd\xd5\x20\xb8\x7c\x5d\x18\x7a\x2a\x7c\x5b\xd7\x57\x90\x8a\xbc\x02\xd0\x35\x24\x38\x57\xd6\x5d\x29\x65\x49\xca\xca\xba\x9a\x4e\x4e\xf1\x25\x45\x27\x78\x13\xd7\xfc\xaa\x3f\x03\xd3\x0b\x70\x68\x63\x49\x58\xce\xee\xbf\xdf\x5e\xc2\x10\x8b\xf3\x5a\x5c\xf0\xe8\x2a\xe4\x29\x38\x38\x48\x34\x5f\x7e\xbf\xfb\x12\xaa\xa4\xc9\x2c\xcf\xef\xbb\x57\xb2\x80\xc3\xe9\xe5\xe1\xde\x62\x3d\xd4\xd9\xae\x49\xfe\x56\x27\x69\xb2\x87\x94\x8e\xe9\x45\x5f\x81\x69\x54\x45\x92\x36\x7a\xec\x23\x5d\xdf\x5f\x3b\x9c\xef\x48\x06\x50\x2f\x4e\xdc\x59\x1c\x9c\xfc\x06\xe7\xe9\x0f\x3e\x26\x58\xc4\x1d\x24\xc0\x84\xad\xaf\x83\x36\x68\xd9\xf9\x75\xbf\x50\x31\xd9\x3b\xeb\x95\x2b\xb2\x21\x12\x22\x71\x88\xd2\x89\x24\x0c\xf3\x1b\x52\x46\x8e\xe3\x6c\x30\x7d\xb6\x3a\xe3\x6f\xb7\x2c\x3f\xf3\xa8\x9e\x45\x7f\x45\xa1\x1b\xc9\x3a\x5c\x6d\x63\xb4\x10\x8e\x8e\xc6\x9b\x6c\xdc\xa4\x64\x63\xcc\xf8\x27\x1b\x7f\x34\x60\x9d\xb2\x4e\xa9\x34\x2b\xa6\xf8\xe4\x4a\x1a\x90\xb2\xe8\x28\xea\x5b\x00\x00\x00\xff\xff\x81\xf7\xdc\x13\xdd\x03\x00\x00")

func clientBootstrapDockerShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDockerSh,
		"client/bootstrap/docker.sh",
	)
}

func clientBootstrapDockerSh() (*asset, error) {
	bytes, err := clientBootstrapDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/docker.sh", size: 989, mode: os.FileMode(493), modTime: time.Unix(1519622708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xdc\x30\x10\x46\xef\xf3\x2b\xbe\xb0\x81\x5c\x2a\xef\xbd\xa1\x0b\x6d\x13\xda\x3d\x74\x13\x68\x7a\x2a\xc5\x68\xad\x71\x34\xd8\x91\x8c\x66\xdc\xad\x2f\xfd\xed\xc5\xeb\xa5\x24\x64\x2f\xd1\x55\x6f\x78\x4f\x9a\xd5\xc5\x7a\x2f\x69\xad\x91\x68\x85\xfb\x92\xc3\xd8\xb0\xc2\x63\x18\xf7\xbd\x34\x6e\x28\xf2\xdb\x1b\xa3\xe3\xc9\x0d\x5e\x0a\x7c\x0a\xc8\xa3\x0d\xa3\x29\x2c\xf2\x89\x9b\xef\x2b\x22\x65\x83\x63\xa2\xed\x4d\x7d\x73\xfb\xfd\x61\xbb\xfb\xf8\xb0\xbd\xdb\x7d\xb8\xfc\x7a\xf7\xed\x76\x5d\xa9\xc6\xb5\x84\xba\xa8\xaf\x25\x71\x31\xf1\x75\xe0\xa1\xcf\x13\xdd\xff\xf8\x54\xbf\x71\xa6\x1a\xc6\xfd\x9c\xfc\x39\x72\xd3\x41\x5a\x04\x56\x93\xe4\x4d\x72\x42\x2b\x3d\xc3\xf7\x85\x7d\x98\xc0\x7f\x44\x4d\xdf\x93\xb4\xf8\x09\xd7\xe2\xf2\xa5\x09\xbf\xae\xe7\x87\x24\x02\x80\x23\x73\x71\xa4\x5e\x37\xbd\x20\xe7\xb3\xc2\xb6\x7d\xf6\x01\x08\x99\x35\xd9\x22\x7c\x87\x27\xdf\x31\xc4\xaa\xff\xb8\x6a\x74\x1d\x4f\x8f\x9c\xe0\xa6\x73\x25\x9b\x73\xd6\xe3\x78\x2b\xd7\xc4\xbd\x32\x2d\xda\x2f\x9c\xb8\x9c\xd6\x82\x83\x58\x44\xca\x18\xbc\xea\x21\x97\xb0\x08\x9f\xcb\x5e\x9b\x9c\xa1\xa8\x87\xdb\xe1\xea\x8a\x5a\x21\x3a\xe1\xda\xf8\x84\x47\xb1\x38\xee\xab\x26\x3f\x61\xb3\xc1\xdf\x65\x09\x5d\xca\x87\x54\xc7\xac\xa6\x44\x8d\xb7\xb3\xa9\xff\x02\x00\x00\xff\xff\x37\x00\x91\x4b\x4d\x02\x00\x00")

func clientBootstrapKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapKeygenSh,
		"client/bootstrap/keygen.sh",
	)
}

func clientBootstrapKeygenSh() (*asset, error) {
	bytes, err := clientBootstrapKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/keygen.sh", size: 589, mode: os.FileMode(493), modTime: time.Unix(1515346036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapTokenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\xa3\x0d\xf5\xd4\xe6\x3e\xa9\x87\x0a\x22\x5a\xb1\xb5\x68\x9d\xc4\x05\xa9\xca\x5a\x43\xa2\x32\xa7\xc4\x09\x13\x6f\x8f\x8a\x3a\x18\x47\xfb\xf3\xa7\xdf\xf6\xea\x46\x1e\x2d\x49\x36\x42\x30\x06\x48\x51\x88\xbd\xda\xaa\xa2\x55\xf9\x2d\x0b\xb1\x82\x07\x24\xf4\x3a\x20\x83\x26\x68\xdb\x12\x82\x1b\x91\xe0\xd5\x79\x88\x8c\x70\xb6\xc1\x40\xf1\x54\x81\xc7\x8f\x88\x1c\x38\xbb\x72\x40\xc3\xa0\xf1\xe4\x68\x91\x22\x5b\x7a\x83\xbb\x6d\x95\x09\x8e\x83\x83\xc1\xf5\x23\x7a\xf0\x91\x20\x4d\xfd\x09\x5e\x04\x00\x40\xfa\x09\xeb\xb2\xd9\xa9\x8d\xd4\xd3\x24\x8d\xe3\x70\x01\x38\x2f\xd0\x3d\xd6\xcd\x73\xdd\x95\x4d\x7b\x68\xf3\xe4\x77\x46\x66\xcc\x46\x8e\xe4\xce\xd4\xcd\x35\x27\x7f\x56\x55\xab\xfd\xa1\x2a\xba\xfb\x42\xed\x9a\x3a\x4f\x82\x8f\x78\x85\xe7\xb0\xfc\x27\xf2\xd2\x4b\x91\x82\xff\x9a\x9c\xa5\x90\x5b\x42\x1f\xac\x5e\x50\x3c\xf6\xef\x3a\x52\x6f\x26\x3d\xc8\x05\x6d\xd6\xcb\xcb\xfe\x5d\x2b\xbe\x03\x00\x00\xff\xff\x3f\xcb\xe3\x05\x5b\x01\x00\x00")

func clientBootstrapTokenShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapTokenSh,
		"client/bootstrap/token.sh",
	)
}

func clientBootstrapTokenSh() (*asset, error) {
	bytes, err := clientBootstrapTokenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/token.sh", size: 347, mode: os.FileMode(493), modTime: time.Unix(1520155125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/bootstrap/daemon-down.sh": clientBootstrapDaemonDownSh,
	"client/bootstrap/daemon-up.sh": clientBootstrapDaemonUpSh,
	"client/bootstrap/docker.sh": clientBootstrapDockerSh,
	"client/bootstrap/keygen.sh": clientBootstrapKeygenSh,
	"client/bootstrap/token.sh": clientBootstrapTokenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"bootstrap": &bintree{nil, map[string]*bintree{
			"daemon-down.sh": &bintree{clientBootstrapDaemonDownSh, map[string]*bintree{}},
			"daemon-up.sh": &bintree{clientBootstrapDaemonUpSh, map[string]*bintree{}},
			"docker.sh": &bintree{clientBootstrapDockerSh, map[string]*bintree{}},
			"keygen.sh": &bintree{clientBootstrapKeygenSh, map[string]*bintree{}},
			"token.sh": &bintree{clientBootstrapTokenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

