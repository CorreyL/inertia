// Code generated by go-bindata.
// sources:
// client/bootstrap/daemon-down.sh
// client/bootstrap/daemon-up.sh
// client/bootstrap/docker.sh
// client/bootstrap/keygen.sh
// client/bootstrap/token.sh
// DO NOT EDIT!

package client

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientBootstrapDaemonDownSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xc1\x4a\xc3\x40\x10\xc6\xf1\xfb\x3c\xc5\x47\xdb\xeb\xe6\x0d\x72\x88\x36\x88\x60\x57\x28\x7a\xf0\xd4\xae\xd9\xd9\x74\x48\x33\x5b\x67\xb7\xa8\x6f\x2f\x22\x42\xe8\xfd\xe3\xff\xfb\xd6\xb8\x0b\x45\x06\x94\xc1\xe4\x52\x91\xb2\xe1\xdd\x44\x47\xd1\x11\x31\x7f\x2a\xea\x89\x11\x03\xcf\x59\x1b\xa2\xc2\x15\x8e\x89\xb6\x5d\xbf\x7b\xf6\x07\xdf\xed\xfa\x56\x94\xad\x4a\x70\x7f\x23\xa2\x35\xee\x4f\x3c\x4c\x90\x84\x70\x36\x0e\xf1\x1b\x76\x55\x15\x1d\x1b\xea\x9e\xf6\x7d\xb7\x7d\x3b\xec\x5f\xbd\x7f\xf4\x0f\xed\xb1\x5c\x63\x46\xcc\xc3\xc4\x86\x4b\x81\xfb\x80\x73\x49\xce\x95\x0d\x2b\x0d\x33\xb7\x9b\x05\xb5\x3a\xfe\xd6\x5f\xc2\xc4\xe0\x2f\x29\xf5\xff\x63\x43\xcb\x8c\xcd\x70\x09\x9b\x1b\x8a\x7e\x02\x00\x00\xff\xff\x8a\x49\xa7\x95\xe9\x00\x00\x00")

func clientBootstrapDaemonDownShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDaemonDownSh,
		"client/bootstrap/daemon-down.sh",
	)
}

func clientBootstrapDaemonDownSh() (*asset, error) {
	bytes, err := clientBootstrapDaemonDownShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/daemon-down.sh", size: 233, mode: os.FileMode(420), modTime: time.Unix(1514021421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapDaemonUpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\x4d\x6f\xdb\x38\x10\xbd\xf3\x57\x4c\x65\x07\xb9\x94\x52\xd2\x62\x81\xae\x0b\x1d\xbc\x8d\xd0\x18\x4d\xec\xc0\xce\x62\xb1\xc8\x06\x2e\x2d\x8d\x23\xd6\x12\xc9\xe5\x8c\xec\x36\xbf\xbe\xa0\xfc\x21\xdb\xc8\xc9\xd6\x70\xe6\xcd\x9b\xc7\xc7\xe9\xc1\x5f\x8a\x74\x0e\x94\x7b\xed\x18\x96\xd6\xc3\xc2\x6b\xf3\xa2\xcd\x0b\x34\x0e\xb8\x44\x28\x14\xd6\xd6\xc4\x42\x10\x32\x48\x14\xe2\x66\x98\xdd\x4f\xc6\xf3\x69\x76\x97\x0d\x67\x59\x7a\xf1\x74\xfd\x4c\xfb\xe0\xc3\x64\xfa\x98\x5e\x3c\x7d\x78\x26\x71\x3b\x99\x3d\xce\x87\x37\x37\xd3\x6c\x36\x4b\x2f\x9e\x3e\x3e\xd3\xa1\x74\x3c\xbc\xcf\x52\x6d\xd0\xb3\x56\x72\x8b\x2f\x46\xf7\xc3\xaf\x59\xda\x2c\xf2\x4a\x35\x26\x2f\x9d\x2a\x92\x5d\xc6\xa0\x7f\xda\x51\x7c\x99\x8c\x1f\x87\xa3\x71\x36\xdd\xb6\xfb\x74\xf5\xe9\x5a\x88\x1e\xcc\x90\x03\xe7\x42\x7b\xcc\xd9\x7a\x8d\x24\xea\x55\xa1\x3d\x48\x07\xfd\xdb\xc9\x7d\x96\x38\x6f\x7f\x60\xce\xe7\x61\xa2\xea\x3c\x14\xef\x7a\x07\xdc\x2f\x25\xe6\x2b\xd0\x4b\x50\x95\x47\x55\xfc\x02\xdf\x18\x13\x04\x52\xa6\x00\x56\x2b\x84\xc2\x6e\x0c\xe0\x4f\x4d\x1c\xc2\x7b\xc1\x86\x77\xd3\x6c\x78\xf3\xef\x7c\xfa\xf7\x78\x3c\x1a\x7f\x4d\xbf\x53\x53\x58\x28\x6c\xbe\x42\x0f\x8e\x40\xfe\x0f\x52\x2e\x75\xc5\xe8\x21\x32\xaa\xc6\xb4\x7f\xa4\x4f\xf4\x5d\xe8\x25\x3c\xc1\x3b\x90\xaf\x10\xf5\xcf\xc0\x22\x78\xfe\x1c\x6e\xc7\x08\x00\x00\xcc\x4b\x0b\xd1\x37\x5d\x55\xa1\xff\x81\x48\x6e\x0d\xab\x30\x48\x1c\xc7\x51\x9b\x78\xcc\xc0\xd7\x20\x97\x70\x0e\x2c\x96\xfa\x73\x18\xfa\xc1\xa3\x53\x1e\x41\x39\xe7\xad\xf3\x5a\xf1\xde\x09\xa0\x6b\xf5\x82\xf1\x96\x5d\x74\x76\x37\x11\xbc\x4b\x21\x62\x24\x3e\x65\xd8\x83\x87\xa6\xaa\x5a\x3f\xed\x94\x3d\xc8\xd4\x0d\x10\x52\x02\xef\xd1\x69\xc6\x5b\xe4\x5d\x40\xeb\xb7\x9e\x11\x58\x11\x1e\xa1\xdc\xb5\xfe\x39\x11\xe2\x14\x70\x37\xc0\x5b\xb0\x95\x55\x05\x48\x0d\xc9\x36\x53\xb6\x99\x62\xa9\x83\x22\xd3\xc6\x74\x8a\xc2\x46\x73\x09\x2a\xcf\x91\x08\xd8\xb6\x83\x95\x96\x78\x0f\x44\xe1\x87\x5b\x87\x78\xac\x70\xad\x0c\x1f\x1b\x13\xa4\xe8\x01\x97\x9a\x40\x13\x18\x0c\x28\xca\xff\x82\x05\xe6\xaa\x21\x84\x0d\xc2\x26\x54\x74\xcf\x2f\xf4\x58\x20\xa8\x45\x85\x40\xac\x3c\x8b\x5e\x0b\x4e\x6c\x5d\xc7\x8a\x20\x64\xee\xa8\xc4\x30\xe2\x4b\x02\x55\x91\x6d\x33\xbc\x5d\xa3\x27\xad\xaa\xf7\xa2\x07\x25\xb3\xa3\x41\x92\x6c\x36\x9b\xb8\x5a\x97\xb1\xb6\x89\xb3\xc4\x94\x14\xd6\xb0\xc4\x9f\xce\x12\x4a\x2e\x51\x6e\xe7\x91\xdb\x79\xa4\xb1\x2c\x71\x8d\x46\xb2\x95\x4a\x76\xfe\x2a\xb9\xae\x44\xef\xa8\xa1\xc7\xdc\xd6\x35\x9a\x02\x8b\xe3\x76\x3f\x1c\xb2\x7a\x7d\xb5\xf1\x8b\xe6\xb2\x59\x84\xb6\x1f\xae\xae\xff\x48\xae\xfe\x4c\xae\x3e\x26\x85\x6d\x1b\x34\x74\x68\xab\xcd\xfe\xdf\xd2\x7a\x99\xeb\x44\xf4\x60\x48\xa0\xc0\x23\x35\x15\xbf\xdf\x6a\xd8\xdd\x4a\xa9\x08\xbc\xb5\xbc\xbf\x99\x9d\x1c\x1e\x6b\xcb\x08\x6b\x47\xb1\x38\x79\x02\x8d\x01\x59\x80\x94\xbe\x86\xff\x5a\x33\x48\xd7\x59\x3a\x2c\x97\x68\x10\xf5\x4f\xd7\x4d\xb4\xcf\x5c\x43\xb2\x56\x3e\xf1\x8d\x49\xb6\x70\x71\x10\x69\xf0\x56\xb0\x2b\x89\xda\xf5\x12\x0d\x12\xe5\x5c\xd2\x1a\x66\x77\x84\x10\x0e\xd2\xdd\x79\x17\x9d\xcd\x6e\xe7\xdf\xc6\x93\x7f\xc6\xf3\xb0\x4f\x67\xe9\xe5\xa1\x32\x89\x89\xca\x64\x65\xec\xc6\xcc\xc3\x37\x5d\xee\xab\x64\x58\x26\xdd\x1c\xed\x36\xd9\x9d\x45\xdb\x37\x13\xb5\x44\xba\xfd\x1c\x89\xdf\x01\x00\x00\xff\xff\x4a\x93\x14\x8d\x09\x06\x00\x00")

func clientBootstrapDaemonUpShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDaemonUpSh,
		"client/bootstrap/daemon-up.sh",
	)
}

func clientBootstrapDaemonUpSh() (*asset, error) {
	bytes, err := clientBootstrapDaemonUpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/daemon-up.sh", size: 1545, mode: os.FileMode(493), modTime: time.Unix(1521682890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x5f\x4f\xdc\x3e\x10\x7c\xf7\xa7\x18\xb8\x13\x7f\x24\x92\x00\xfa\xe9\xf7\x50\x44\x25\x7a\x9c\xaa\xaa\x48\x48\x1c\x3c\x57\x26\xd9\x5c\x2c\x12\x3b\x78\x37\xd0\xb4\xea\x77\xaf\xe2\x8b\x53\xae\xa5\x2a\x79\x72\xbc\xb3\xeb\x99\xd9\x99\xed\x64\xf7\xc6\x66\x5c\x29\x35\xc3\x07\xe7\x84\xc5\xeb\x96\xa1\xd1\xe8\xbc\x32\x96\x50\x3a\x8f\xc2\xe5\x0f\xe4\xa1\x6d\x31\x1e\x93\xdc\x35\xad\x63\x4a\xd5\x0c\xb7\x95\x61\x18\x46\xeb\x49\xa4\x87\xae\xdb\x4a\xa7\xf8\x64\x59\x74\x5d\x33\xf2\xce\xd7\x70\xb6\xee\x61\x4a\x18\x41\xe1\x88\xed\xbe\x80\xbe\x1a\x96\xd0\x4f\x2c\x54\xc0\x59\xdc\xdd\x77\x56\x3a\x9c\xfc\x9f\x1e\xff\x77\x04\x4f\x8f\x9d\xf1\xc4\xe0\xae\x70\x81\x86\x46\x49\xcf\x60\xa1\x96\x53\xa5\x98\x04\x09\x29\x75\x79\xbd\xf8\xbc\xbc\xf9\xb2\xba\xbe\xbb\x59\x2c\xcf\xd7\x24\xe9\x86\x63\x9a\xbb\x26\x16\x2f\x97\xab\xdb\xf3\xfd\x4c\x9a\x36\x5b\x93\x24\x23\x80\xab\xfd\x41\xf6\xa2\xa2\xfc\x61\x60\x17\x65\x7a\xd2\x45\x0f\xb3\x51\x40\x45\xaa\x4c\x89\x4a\x73\x15\x01\xa7\xef\xb3\x82\x9e\x32\xdb\xd5\xf5\x19\xa4\x22\xab\x00\x0c\x82\x04\xc7\xaa\x34\x67\x4a\x95\x24\x79\x55\x9a\x9a\x0e\x0e\xf1\x3d\x54\x67\xb8\xf0\x6b\x7e\x37\x9e\x81\xf9\x09\xd8\x75\x3e\x27\xdc\xdd\x5c\xfd\xba\x3d\x45\x41\x2c\xc6\x6a\x31\xce\x62\x98\x90\x86\x62\x64\x10\xdc\x7c\xfd\xfd\xe1\x0b\x56\x05\x4c\x52\xf2\xea\x6a\x78\x25\x71\xd8\x9d\x9f\xee\x6e\x28\xd6\x71\xce\xf3\x9a\xe4\x5f\x73\x02\x26\xb9\x0e\xed\x98\x9f\x8c\x13\x98\x26\x94\x27\xe9\xbc\xc5\xa6\x32\xe8\xfe\x31\xd8\xf9\x91\x24\x1a\xf5\xea\xc6\x4d\x89\x9d\x83\xbf\xd8\x79\xf8\x82\xc7\x0c\x17\x8d\xfe\xe6\x2c\x96\x8b\xd5\x66\x19\x36\x27\x8e\xb1\x40\xde\xb1\xb8\x26\x6e\x29\x9a\xb4\xf6\xd4\x22\x79\x8c\xad\x19\x49\x9e\x71\xcf\x42\x4d\xe2\xa9\x26\xcd\xf4\x9a\xd2\xbe\x9b\x06\x21\xe9\x47\x5e\x7f\xea\x9d\xe1\xd6\xf7\x10\x87\xc2\x3d\xdb\xda\xe9\x02\x1d\x1b\xbb\x1e\x23\xee\x83\x61\x47\x2f\xd0\xf7\x54\x3a\x4f\xf0\xc4\xce\xcb\x00\x14\x17\x9f\x89\x6d\xe9\x04\x37\x25\xa6\xd4\x60\xbe\x15\xea\xe9\x77\x88\xf1\x6f\xfc\x83\x86\x6a\x0b\x31\xd5\xb6\xc8\x0f\x9f\x6e\x25\x19\x96\xda\xb5\x85\x16\xc2\xde\xde\x74\x93\x4c\x79\x0f\xb4\xb6\xba\xde\x44\xeb\x4d\x84\x4a\x33\x46\x45\x95\x46\xa9\x60\x3d\x93\x7f\x32\x39\xc5\x2c\xb0\x68\x2f\xea\x67\x00\x00\x00\xff\xff\x99\xac\x13\xfb\x96\x04\x00\x00")

func clientBootstrapDockerShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapDockerSh,
		"client/bootstrap/docker.sh",
	)
}

func clientBootstrapDockerSh() (*asset, error) {
	bytes, err := clientBootstrapDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/docker.sh", size: 1174, mode: os.FileMode(493), modTime: time.Unix(1521099304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xdc\x30\x10\x46\xef\xf3\x2b\xbe\xb0\x81\x5c\x2a\xef\xbd\xa1\x0b\x6d\x13\xda\x3d\x74\x13\x68\x7a\x2a\xc5\x68\xad\x71\x34\xd8\x91\x8c\x66\xdc\xad\x2f\xfd\xed\xc5\xeb\xa5\x24\x64\x2f\xd1\x55\x6f\x78\x4f\x9a\xd5\xc5\x7a\x2f\x69\xad\x91\x68\x85\xfb\x92\xc3\xd8\xb0\xc2\x63\x18\xf7\xbd\x34\x6e\x28\xf2\xdb\x1b\xa3\xe3\xc9\x0d\x5e\x0a\x7c\x0a\xc8\xa3\x0d\xa3\x29\x2c\xf2\x89\x9b\xef\x2b\x22\x65\x83\x63\xa2\xed\x4d\x7d\x73\xfb\xfd\x61\xbb\xfb\xf8\xb0\xbd\xdb\x7d\xb8\xfc\x7a\xf7\xed\x76\x5d\xa9\xc6\xb5\x84\xba\xa8\xaf\x25\x71\x31\xf1\x75\xe0\xa1\xcf\x13\xdd\xff\xf8\x54\xbf\x71\xa6\x1a\xc6\xfd\x9c\xfc\x39\x72\xd3\x41\x5a\x04\x56\x93\xe4\x4d\x72\x42\x2b\x3d\xc3\xf7\x85\x7d\x98\xc0\x7f\x44\x4d\xdf\x93\xb4\xf8\x09\xd7\xe2\xf2\xa5\x09\xbf\xae\xe7\x87\x24\x02\x80\x23\x73\x71\xa4\x5e\x37\xbd\x20\xe7\xb3\xc2\xb6\x7d\xf6\x01\x08\x99\x35\xd9\x22\x7c\x87\x27\xdf\x31\xc4\xaa\xff\xb8\x6a\x74\x1d\x4f\x8f\x9c\xe0\xa6\x73\x25\x9b\x73\xd6\xe3\x78\x2b\xd7\xc4\xbd\x32\x2d\xda\x2f\x9c\xb8\x9c\xd6\x82\x83\x58\x44\xca\x18\xbc\xea\x21\x97\xb0\x08\x9f\xcb\x5e\x9b\x9c\xa1\xa8\x87\xdb\xe1\xea\x8a\x5a\x21\x3a\xe1\xda\xf8\x84\x47\xb1\x38\xee\xab\x26\x3f\x61\xb3\xc1\xdf\x65\x09\x5d\xca\x87\x54\xc7\xac\xa6\x44\x8d\xb7\xb3\xa9\xff\x02\x00\x00\xff\xff\x37\x00\x91\x4b\x4d\x02\x00\x00")

func clientBootstrapKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapKeygenSh,
		"client/bootstrap/keygen.sh",
	)
}

func clientBootstrapKeygenSh() (*asset, error) {
	bytes, err := clientBootstrapKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/keygen.sh", size: 589, mode: os.FileMode(493), modTime: time.Unix(1515346036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientBootstrapTokenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x4a\xc3\x40\x10\x86\xef\xfb\x14\xbf\xb4\xd2\x53\xb2\xf7\x42\x0e\x45\x82\x29\xd6\x46\x8c\xe0\x45\x08\xdb\x64\x74\x97\xd8\xd9\xb8\xb3\x6b\xf1\xed\x25\x9a\x6a\x8f\x33\xdf\x7c\x3f\x33\xb3\xb8\xd2\x07\xc7\x5a\xac\x52\x42\x11\x19\x29\xf5\x58\xee\xca\x4d\x53\x16\xd7\xa2\xd4\x02\xb7\xc4\x14\x4c\x24\x81\x61\x34\x4d\x85\xe8\x07\x62\xbc\xfa\x80\x24\x84\x93\x8b\x16\x9b\x87\x2d\x02\x7d\x24\x92\x28\xf9\x85\x03\x83\xde\xd0\xd1\xf3\x2c\x25\x71\xfc\x86\x9b\xdd\x36\x57\x92\x7a\x8f\xde\x77\x03\x05\x84\xc4\xc8\xb2\x70\xc4\x8b\x02\x80\xec\x13\xcb\xaa\xbe\x2f\xd7\xda\x8c\xa3\xb6\x5e\xe2\x19\xd0\xb4\x40\x7b\xb7\xaf\x9f\xf7\x6d\x55\x37\x4f\x4d\xb1\xfa\x9b\xd1\xb9\x88\xd5\x03\xfb\x13\xb7\x53\x2d\xab\x7f\x6b\x4a\x2b\x7e\x32\xcf\xbd\x8c\x38\x86\xaf\xd1\x3b\x8e\x85\x63\x0a\xd1\x99\x19\xa5\x43\xf7\x6e\x12\x77\x76\x34\xbd\x9e\xd1\x7a\x39\xff\xe4\xf7\x0e\xf5\x1d\x00\x00\xff\xff\xa4\x4f\x24\xd1\x35\x01\x00\x00")

func clientBootstrapTokenShBytes() ([]byte, error) {
	return bindataRead(
		_clientBootstrapTokenSh,
		"client/bootstrap/token.sh",
	)
}

func clientBootstrapTokenSh() (*asset, error) {
	bytes, err := clientBootstrapTokenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/bootstrap/token.sh", size: 309, mode: os.FileMode(493), modTime: time.Unix(1521411375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/bootstrap/daemon-down.sh": clientBootstrapDaemonDownSh,
	"client/bootstrap/daemon-up.sh": clientBootstrapDaemonUpSh,
	"client/bootstrap/docker.sh": clientBootstrapDockerSh,
	"client/bootstrap/keygen.sh": clientBootstrapKeygenSh,
	"client/bootstrap/token.sh": clientBootstrapTokenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"bootstrap": &bintree{nil, map[string]*bintree{
			"daemon-down.sh": &bintree{clientBootstrapDaemonDownSh, map[string]*bintree{}},
			"daemon-up.sh": &bintree{clientBootstrapDaemonUpSh, map[string]*bintree{}},
			"docker.sh": &bintree{clientBootstrapDockerSh, map[string]*bintree{}},
			"keygen.sh": &bintree{clientBootstrapKeygenSh, map[string]*bintree{}},
			"token.sh": &bintree{clientBootstrapTokenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

