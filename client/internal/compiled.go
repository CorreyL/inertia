// Code generated by go-bindata.
// sources:
// client/scripts/daemon-down.sh
// client/scripts/daemon-up.sh
// client/scripts/docker.sh
// client/scripts/keygen.sh
// client/scripts/token.sh
// DO NOT EDIT!

package client

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientScriptsDaemonDownSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xb1\x6e\xc2\x30\x10\xc6\xf1\xfd\x9e\xe2\x2b\xb0\x1a\x9e\x20\x43\x2a\x22\x54\xa9\xb8\x12\x52\x87\x4e\x60\xe2\x73\x38\xd1\x9c\xa9\x7d\xa8\xaf\x5f\x45\x74\x88\xd8\x6e\xf8\xdf\x4f\xdf\xf2\x65\x73\x16\xdd\xd4\x0b\xd1\x12\xaf\xa1\x4a\x8f\xda\x17\xb9\x19\x52\x2e\x38\x17\xd1\x41\x74\x40\xcc\xbf\x0a\xbb\x30\x62\xe0\x31\xeb\x9a\xa8\xb2\xc1\x31\xd1\xb6\xed\xf6\x1f\xfe\xe8\xdb\x7d\xd7\x88\x72\x31\x09\xee\x11\x4d\xe2\x8e\xed\xff\x05\x7d\x56\x0b\x53\x81\xa0\x11\x16\xae\x0c\xb1\x07\x2c\x69\x3a\xa5\xa2\xdc\x55\x45\x87\x35\xb5\xef\x87\xae\xdd\x7e\x1d\x0f\x9f\xde\xbf\xf9\x5d\x73\xaa\xf7\x98\x11\x73\x7f\xe5\x82\x5b\x85\xfb\x81\x73\x49\xbe\x8d\x0b\x16\x1a\x46\x6e\x56\xb3\x21\x8b\x13\xcd\xfb\x32\xc2\x25\xac\x9e\x4c\xfa\x0b\x00\x00\xff\xff\x62\xed\x0f\x4a\xfb\x00\x00\x00")

func clientScriptsDaemonDownShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsDaemonDownSh,
		"client/scripts/daemon-down.sh",
	)
}

func clientScriptsDaemonDownSh() (*asset, error) {
	bytes, err := clientScriptsDaemonDownShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/daemon-down.sh", size: 251, mode: os.FileMode(420), modTime: time.Unix(1526365343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsDaemonUpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x51\x6f\xe3\x36\x13\x7c\xd7\xaf\x98\xc8\xce\x97\xaf\x40\x25\xf5\x2e\x7d\xf2\x41\x07\xb8\x17\xe1\x12\x34\xb1\x03\x3b\xd7\xa2\x48\x03\x1f\x2d\xad\x2d\xd6\x12\xa9\x23\x57\x76\xdb\x5f\x5f\x90\x92\x63\x3b\x49\xd1\x27\xd9\xe4\xee\x72\x76\x76\x66\x07\x67\xc9\x52\xaa\xc4\x96\x41\x30\xc0\x4f\xc2\xca\x1c\x36\x37\xb2\x61\xac\xb4\x81\x25\x66\xa9\xd6\x68\x1b\xdc\x28\x32\x2c\x05\x0c\x7d\x6b\xa5\xa1\x9a\x14\x5b\xfc\xbf\x90\x86\x72\xd6\x46\x92\xfd\x1e\xc4\xf9\x77\xc1\x00\x42\x15\x58\x1a\xa9\x5c\x22\x97\x84\x42\x50\xad\x15\xb4\xaa\xa4\xa2\x38\x08\x2c\x31\x22\x72\xef\x7d\xb1\x64\x20\xcc\xba\xf5\xd5\xe2\xe0\x6a\x9c\xdd\x4d\x27\x8b\x59\x76\x9b\x8d\xe7\x59\x7a\xfe\xf8\xee\xc9\xee\x0f\xef\xa7\xb3\x87\xf4\xfc\xf1\xfd\x93\x0d\xae\xa7\xf3\x87\xc5\xf8\xea\x6a\x96\xcd\xe7\xe9\xf9\xe3\xe5\x93\x75\xc5\xf6\x00\x65\x2d\xd6\x84\x82\x58\xc8\xea\x50\x73\x32\xbe\xcb\x52\xd9\x85\x44\x1d\xa2\xe0\xe6\x6e\xfc\x39\x4b\xdb\x65\x5e\x89\x56\xe5\x65\x23\x8a\xa4\x8f\x18\x0d\x4f\xa1\xf8\xfa\x8c\x42\x93\x55\x17\x8c\x5a\x30\x93\xc1\xae\x14\x8c\x46\x1b\x3e\x6e\xd3\xb4\xca\x42\x2b\x48\xe5\x4f\x73\xad\x58\xb8\xaa\x8e\x18\x8b\x4a\xab\xb5\xfb\x4a\x86\xb4\xa8\x45\xd3\x50\x01\xd6\x7d\xa8\x71\x64\xe2\xa8\xe1\x38\xf8\x34\x9d\x3c\x8c\x6f\x26\xd9\xac\x23\xe0\xc7\xcb\x1f\x2e\x1d\x98\x39\xb1\x1b\xca\x11\xfd\x71\x50\x6f\x0a\x69\x10\x35\x18\x5e\x4f\xef\xb2\xa4\x31\xfa\x0f\xca\xf9\xe5\x71\xdc\xb7\xf8\x6f\xe7\x49\x6c\x6d\xe5\x9e\xf8\x54\x52\xbe\x81\x5c\x41\x54\x86\x44\xf1\x97\xeb\xcc\xcf\xd4\xcd\x97\xc5\x86\x50\xe8\x9d\x02\xfd\x29\xad\xd7\x48\xd7\x7f\x1c\x8c\x6f\x67\xd9\xf8\xea\xb7\xc5\xec\xcb\x64\x72\x33\xf9\x9c\x7e\xb5\x6d\xa1\x51\xe8\x7c\x43\x06\x8d\x45\xf4\x0d\x51\xb4\x92\x95\x63\x30\x54\xa2\xa6\x74\x78\x34\xa3\xf0\x6b\x20\x57\x78\xc4\x19\xa2\xbf\x11\x0e\x5f\x14\x0b\xf1\xf4\xc1\x71\xa5\x02\x00\xa0\xbc\xd4\x08\xef\xdb\x4e\xa3\xcf\x40\xf6\x42\xe8\x07\xc2\x1a\xb6\x22\x6a\x42\x9f\x73\x0c\xc6\xd4\x88\x56\x78\xf9\x06\x3e\x22\x29\x68\x9b\xa8\xb6\xaa\xf0\xfe\xe3\xff\xde\x05\x2b\xf9\x21\xe8\x50\x85\x2f\x74\x11\xe2\x2c\x45\xc8\x64\xf9\x14\xd9\x00\x57\x7a\xa7\x2a\x2d\x0a\xef\x17\xb2\x4c\xc5\x1e\x8f\xd7\x67\x7c\xd4\xc0\x3e\xd4\x61\x1f\x7a\x4d\xbe\x86\xda\x38\x30\xdd\xe5\x6b\x7c\x54\x59\xea\x9f\xbd\x75\x4f\x3a\x3c\x58\xb6\xb2\x2a\xc0\x4e\xa2\xb6\xd4\x6d\x55\xa0\x14\x5b\xc2\x92\x48\xc1\xe6\xcd\x45\x01\xa9\x58\xf7\x69\x4e\x7e\xbf\xdc\xcf\x21\x18\x49\x07\x33\x7a\x05\xf3\xf6\x3f\x20\xfa\x6e\x23\x79\x5a\xe0\x2d\x32\x9d\xb8\x66\xad\x3a\x58\x03\x3b\xc9\x25\x44\x9e\x93\xb5\x7b\x33\x94\xda\xf2\xbe\xb2\x75\x1f\xf6\xba\x0b\x06\x30\x54\xd1\x56\x28\xee\x43\x0e\x0e\x70\xa9\xa2\xaa\xf4\xce\xaf\xae\x43\x75\xf7\xcb\xe8\x2a\xf6\xb6\x21\x5f\xdd\x0d\xfc\x2e\xf3\x71\xb5\x36\xcf\xdb\xc2\xf9\xb6\xd4\x3b\x70\x29\x2d\x76\xda\x6c\xec\x28\x18\xa0\x64\x6e\xec\x28\x49\xd6\x92\xcb\x76\x19\xe7\xba\x4e\xde\xda\x19\x83\x52\xef\x22\xc9\x91\xcf\x0b\x3a\xce\x66\xbd\x65\x9e\x57\x60\xb7\x2e\x86\x47\x16\x0f\x83\x13\x49\xb6\x0a\x51\x81\x28\x32\x35\x7e\xf7\x14\x47\xcd\x41\x75\x3e\x7e\x14\x0e\x4f\x97\x42\xb8\x8f\xdc\x22\xd9\x0a\x93\x98\x56\x25\x5d\xb9\xd8\x31\x37\x7a\xeb\xf0\x90\x12\x7a\xfb\x87\xa3\x44\x34\x4d\xe2\x29\xed\xaf\x08\xee\x22\xed\xef\x0f\xa7\xf3\xf9\xf5\xe2\xe7\xc9\xf4\xd7\xc9\xc2\xed\xe1\x79\x7a\xf1\x9c\xe9\x56\x47\x99\x6c\x94\xde\xa9\x85\xfb\x6f\x2f\xf6\x59\x91\xf3\xf9\xa1\x0f\x6f\xf4\xfe\x2e\xec\xf5\xe4\x81\x1c\xf6\x7a\xf8\x5a\x39\xff\x04\x00\x00\xff\xff\xc0\xdf\xd7\xa2\xab\x06\x00\x00")

func clientScriptsDaemonUpShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsDaemonUpSh,
		"client/scripts/daemon-up.sh",
	)
}

func clientScriptsDaemonUpSh() (*asset, error) {
	bytes, err := clientScriptsDaemonUpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/daemon-up.sh", size: 1707, mode: os.FileMode(493), modTime: time.Unix(1527376040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfb\x29\x1e\x4d\xd4\x82\x84\x63\x9a\x23\x55\x91\x4a\x92\x13\x95\x22\x25\xed\x19\x6d\xed\xb1\xbd\xaa\xbd\xeb\xce\x8c\x5b\x0c\xe2\xbb\x23\xff\x85\x82\x80\xe6\x14\xef\xbc\x79\xf3\xf6\xb7\xb3\x78\x15\xdf\x39\x1f\x4b\x61\xcc\x02\x1f\x43\x50\x51\xb6\xb5\xc0\xa2\xb2\x49\xe1\x3c\x21\x0b\x8c\x34\x24\xf7\xc4\x2b\x63\x84\x14\x11\x19\xb3\xdd\x6f\x3e\xed\x0e\x9f\x8f\xfb\xdb\xc3\x66\x77\x99\x93\xae\x46\x49\x12\xaa\xa9\xb8\xdd\x1d\x6f\x2e\xcf\x62\xad\xea\x38\x27\x8d\x46\x81\x14\x67\xdd\xa8\xe3\xbd\xab\xe1\xbc\xa8\x2d\x4b\xab\x2e\x78\xb8\x0c\xdb\x5e\x02\x27\xb0\x25\x93\x4d\xdb\x49\x41\xe9\xca\xb8\x0c\x85\x95\x62\xcc\x82\xf5\x87\x38\xa5\xc7\xd8\x37\x65\x79\x01\x2d\xc8\x1b\x00\xa0\x2f\x4e\xf1\xce\x64\xee\xc2\x98\x8c\x34\x29\x32\x57\xd2\xeb\x37\xf8\xd6\x57\x17\xb8\xe2\x5c\xde\x8f\xff\x81\xe5\x39\x24\x34\x9c\x10\x6e\x0f\xd7\x3f\x4f\xd7\x48\x49\xd4\xf9\x21\x57\xe7\xb0\xea\x8b\x53\x82\xa4\xe1\xf2\x2f\xf3\xbb\x9f\x34\x69\x18\x34\x51\x26\xc7\xeb\x6e\x4a\x14\x70\xb2\x5c\x9f\x0c\x11\xcb\xc9\xe7\x29\x27\xfd\x9f\x4f\xaf\x89\xf6\x7d\x3b\x96\xe7\xa3\x83\xd0\xac\x62\xd2\x86\x3d\x86\x4a\x77\xef\xef\x1d\xde\xab\xca\x7e\x0d\x1e\xbb\xcd\x71\x40\xe8\x13\x12\x30\x3d\x34\x8e\x09\x49\x23\x1a\xaa\x89\x6d\x07\x36\x67\xaa\x11\x3d\x4c\x6d\x31\x69\x12\x4b\x2b\x4a\x55\xc4\x54\x92\x15\xfa\x25\x5b\x9f\xab\x6d\x66\x03\x44\xed\xf8\x28\x66\x4e\xb6\xc0\x0d\xb7\xd0\x80\x34\x3c\xf9\x32\xd8\x14\x8d\x38\x9f\x0f\x58\x02\xf7\xd7\x7a\x3b\x2a\xef\x28\x0b\x4c\x60\x92\xc0\xda\x89\x34\x4c\xd6\x53\xcb\xcc\x7f\x7e\x53\x2c\x9f\xad\xe0\xfc\xd9\x2d\xdd\xef\x1c\x8b\x67\xd5\x3f\x11\xda\x5a\xa3\x0e\x73\x53\xa7\x56\x09\xa7\xa7\xf3\x49\x34\x6f\x60\x1f\x63\xee\x78\x51\x8c\x7f\x06\xc8\x9c\xc9\x9c\x31\x3d\x4b\x21\x7e\x74\x09\x4d\x9b\x2d\x6a\x59\xcd\x8f\x00\x00\x00\xff\xff\x6e\x88\x52\x3d\x99\x03\x00\x00")

func clientScriptsDockerShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsDockerSh,
		"client/scripts/docker.sh",
	)
}

func clientScriptsDockerSh() (*asset, error) {
	bytes, err := clientScriptsDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/docker.sh", size: 921, mode: os.FileMode(493), modTime: time.Unix(1526365343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xdc\x30\x10\x46\xef\xf3\x2b\xbe\xb0\x81\x5c\x2a\xef\xbd\xa1\x0b\x6d\x13\xda\x3d\x74\x13\x68\x7a\x2a\xc5\x68\xad\x71\x34\xd8\x91\x8c\x66\xdc\xad\x2f\xfd\xed\xc5\xeb\xa5\x24\x64\x2f\xd1\x55\x6f\x78\x4f\x9a\xd5\xc5\x7a\x2f\x69\xad\x91\x68\x85\xfb\x92\xc3\xd8\xb0\xc2\x63\x18\xf7\xbd\x34\x6e\x28\xf2\xdb\x1b\xa3\xe3\xc9\x0d\x5e\x0a\x7c\x0a\xc8\xa3\x0d\xa3\x29\x2c\xf2\x89\x9b\xef\x2b\x22\x65\x83\x63\xa2\xed\x4d\x7d\x73\xfb\xfd\x61\xbb\xfb\xf8\xb0\xbd\xdb\x7d\xb8\xfc\x7a\xf7\xed\x76\x5d\xa9\xc6\xb5\x84\xba\xa8\xaf\x25\x71\x31\xf1\x75\xe0\xa1\xcf\x13\xdd\xff\xf8\x54\xbf\x71\xa6\x1a\xc6\xfd\x9c\xfc\x39\x72\xd3\x41\x5a\x04\x56\x93\xe4\x4d\x72\x42\x2b\x3d\xc3\xf7\x85\x7d\x98\xc0\x7f\x44\x4d\xdf\x93\xb4\xf8\x09\xd7\xe2\xf2\xa5\x09\xbf\xae\xe7\x87\x24\x02\x80\x23\x73\x71\xa4\x5e\x37\xbd\x20\xe7\xb3\xc2\xb6\x7d\xf6\x01\x08\x99\x35\xd9\x22\x7c\x87\x27\xdf\x31\xc4\xaa\xff\xb8\x6a\x74\x1d\x4f\x8f\x9c\xe0\xa6\x73\x25\x9b\x73\xd6\xe3\x78\x2b\xd7\xc4\xbd\x32\x2d\xda\x2f\x9c\xb8\x9c\xd6\x82\x83\x58\x44\xca\x18\xbc\xea\x21\x97\xb0\x08\x9f\xcb\x5e\x9b\x9c\xa1\xa8\x87\xdb\xe1\xea\x8a\x5a\x21\x3a\xe1\xda\xf8\x84\x47\xb1\x38\xee\xab\x26\x3f\x61\xb3\xc1\xdf\x65\x09\x5d\xca\x87\x54\xc7\xac\xa6\x44\x8d\xb7\xb3\xa9\xff\x02\x00\x00\xff\xff\x37\x00\x91\x4b\x4d\x02\x00\x00")

func clientScriptsKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsKeygenSh,
		"client/scripts/keygen.sh",
	)
}

func clientScriptsKeygenSh() (*asset, error) {
	bytes, err := clientScriptsKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/keygen.sh", size: 589, mode: os.FileMode(493), modTime: time.Unix(1522017202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientScriptsTokenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcf\x41\x4b\xfb\x40\x10\x05\xf0\xfb\x7e\x8a\xf7\xa7\xfd\xd3\x53\xb2\xf7\x42\x0e\x45\x82\x29\xd6\x46\x8c\xe2\x45\x08\xdb\x64\x6c\x42\xcc\x6c\x9c\xd9\x55\xfc\xf6\x12\x4d\xf5\x38\xf3\x9b\x79\xf0\x56\xff\xec\xa9\x67\xab\x9d\x31\x4a\x01\x09\x19\xb3\xc2\xa3\x92\xc0\xc9\x39\x8e\xc4\x21\x35\xf7\xf9\x21\xdf\x55\x79\xf6\x5f\x67\xbc\x26\x26\x71\x81\xe0\xd0\x3a\x1a\x3d\x23\xf8\x81\x18\x51\x7b\x3e\xe3\xea\xb0\xc7\x8b\x17\xec\xee\xf6\x10\x7a\x8b\xa4\x41\x53\xa3\xb1\xf5\x68\x7d\x33\x90\x40\x22\x23\x49\x64\xc4\xb3\x01\x80\xe4\x1d\xeb\xa2\xbc\xcd\xb7\xd6\x4d\x93\xed\xbc\x86\x0b\x10\xaa\xaa\xa8\x6f\x8e\xe5\xd3\xb1\x2e\xca\xea\xa1\xca\x36\xbf\x37\x36\x55\xed\xec\xc0\xfe\x83\xeb\x79\xd6\xcd\xdf\xd7\x9c\x96\x7d\x67\x5e\x76\x09\x71\x90\xcf\xc9\xf7\x1c\xb2\x9e\x49\x42\xef\xda\xc5\xe2\xa9\x79\x75\x91\x9b\x6e\x72\xad\x5d\x6c\xbb\x5e\x1a\xff\x34\x33\x5f\x01\x00\x00\xff\xff\xb8\x50\x60\x94\x24\x01\x00\x00")

func clientScriptsTokenShBytes() ([]byte, error) {
	return bindataRead(
		_clientScriptsTokenSh,
		"client/scripts/token.sh",
	)
}

func clientScriptsTokenSh() (*asset, error) {
	bytes, err := clientScriptsTokenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/scripts/token.sh", size: 292, mode: os.FileMode(493), modTime: time.Unix(1527904626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/scripts/daemon-down.sh": clientScriptsDaemonDownSh,
	"client/scripts/daemon-up.sh": clientScriptsDaemonUpSh,
	"client/scripts/docker.sh": clientScriptsDockerSh,
	"client/scripts/keygen.sh": clientScriptsKeygenSh,
	"client/scripts/token.sh": clientScriptsTokenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"scripts": &bintree{nil, map[string]*bintree{
			"daemon-down.sh": &bintree{clientScriptsDaemonDownSh, map[string]*bintree{}},
			"daemon-up.sh": &bintree{clientScriptsDaemonUpSh, map[string]*bintree{}},
			"docker.sh": &bintree{clientScriptsDockerSh, map[string]*bintree{}},
			"keygen.sh": &bintree{clientScriptsKeygenSh, map[string]*bintree{}},
			"token.sh": &bintree{clientScriptsTokenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

