// Code generated by go-bindata.
// sources:
// cmd/bootstrap/daemon-down.sh
// cmd/bootstrap/daemon-up.sh
// cmd/bootstrap/docker.sh
// cmd/bootstrap/keygen.sh
// cmd/bootstrap/token.sh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdBootstrapDaemonDownSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xc1\x4a\xc3\x40\x10\xc6\xf1\xfb\x3c\xc5\x47\xdb\xeb\xe6\x0d\x72\x88\x36\x88\x60\x57\x28\x7a\xf0\xd4\xae\xd9\xd9\x74\x48\x33\x5b\x67\xb7\xa8\x6f\x2f\x22\x42\xe8\xfd\xe3\xff\xfb\xd6\xb8\x0b\x45\x06\x94\xc1\xe4\x52\x91\xb2\xe1\xdd\x44\x47\xd1\x11\x31\x7f\x2a\xea\x89\x11\x03\xcf\x59\x1b\xa2\xc2\x15\x8e\x89\xb6\x5d\xbf\x7b\xf6\x07\xdf\xed\xfa\x56\x94\xad\x4a\x70\x7f\x23\xa2\x35\xee\x4f\x3c\x4c\x90\x84\x70\x36\x0e\xf1\x1b\x76\x55\x15\x1d\x1b\xea\x9e\xf6\x7d\xb7\x7d\x3b\xec\x5f\xbd\x7f\xf4\x0f\xed\xb1\x5c\x63\x46\xcc\xc3\xc4\x86\x4b\x81\xfb\x80\x73\x49\xce\x95\x0d\x2b\x0d\x33\xb7\x9b\x05\xb5\x3a\xfe\xd6\x5f\xc2\xc4\xe0\x2f\x29\xf5\xff\x63\x43\xcb\x8c\xcd\x70\x09\x9b\x1b\x8a\x7e\x02\x00\x00\xff\xff\x8a\x49\xa7\x95\xe9\x00\x00\x00")

func cmdBootstrapDaemonDownShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapDaemonDownSh,
		"cmd/bootstrap/daemon-down.sh",
	)
}

func cmdBootstrapDaemonDownSh() (*asset, error) {
	bytes, err := cmdBootstrapDaemonDownShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/daemon-down.sh", size: 233, mode: os.FileMode(420), modTime: time.Unix(1514021421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapDaemonUpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\xd8\xca\x2e\xee\x25\x14\x2f\x2d\x0a\xa4\x17\xf8\xc1\x4d\x8c\x9c\x91\x5a\x3a\xd8\x2e\x8a\xa0\x2d\x1c\x9a\x5a\x5b\x8c\x25\x52\xe5\xae\xac\xdc\xfd\xfa\x82\xf2\xe7\x5d\xef\xc9\x16\xb9\x3b\x33\x3b\x9c\x1d\xc0\x6f\x9a\xac\x01\x32\xc1\x36\x0c\x1b\x1f\x60\x1d\xac\xdb\x5a\xb7\x85\xb6\x01\x2e\x11\x0a\x8d\xb5\x77\xa9\x10\x84\x0c\x12\x85\x78\xc8\xe7\xcb\xd1\x8f\x24\x3e\x8e\x27\xb3\x3c\x5b\x65\xe3\xd9\x64\x64\x1d\x06\xb6\x5a\x1e\x8a\xc5\x87\x3c\x5b\x8e\xa7\xd9\x64\xbe\xea\x8b\xdf\xdd\xbe\x7b\x2b\xa6\xb3\xf1\xa7\xc9\x6a\x3e\x79\xc8\x17\xd3\x65\x3e\xff\x32\x6a\xd7\xa6\xd2\xad\x33\x65\xa3\x0b\x75\x04\x10\x62\x00\x1f\x4a\x34\x3b\xb0\x1b\xd0\x55\x40\x5d\x3c\x42\x68\x9d\xb3\x6e\x9b\x8a\xf1\xef\xf3\xc9\xf8\xe3\x97\xd5\xfc\x8f\x2c\x9b\x66\x9f\x46\x5f\xa9\x2d\x3c\x14\xde\xec\x30\x40\x43\x20\xff\x05\x29\x37\xb6\x62\x0c\x90\x38\x5d\xe3\x68\x78\x25\x32\xf9\x1a\xd1\x97\x7a\x87\x80\xdf\x2d\x71\x9c\xb1\xf0\x9d\x4b\x85\xdd\xc0\x5f\xf0\x03\xc8\x27\x48\x86\x2f\x38\x12\xf8\xe7\x7d\xb4\xc1\x09\x00\x00\x34\xa5\x87\xe4\xb3\xad\xaa\xd8\x7c\x46\x31\xde\xb1\x8e\x13\x24\x7d\xd5\xb5\xaa\x50\x83\xdc\xc0\x4b\x54\xb1\xb1\xef\xa3\x98\x87\xb6\xaa\x7a\x93\x2b\xcd\x48\x0c\x47\x17\xce\x9e\x3f\x9b\x2f\xd6\x0e\x5f\xba\x18\x51\x66\x71\xa4\x87\xe0\xbf\xa1\x61\x28\x6c\x40\xc3\x3e\x3c\x8a\x7a\x57\xd8\x00\xb2\x81\xe1\x7d\x3e\x9b\xa8\xe6\x50\x10\x1b\xe6\xad\xbb\x68\x86\xce\x72\x09\xda\x18\x24\x02\xf6\xbd\x9c\xd2\x13\x9f\x78\x29\xfe\x30\x68\x57\x40\xc0\x0a\xf7\xda\x5d\x48\x2c\x12\x48\x31\x00\x2e\x2d\x81\x25\x70\x18\x51\x74\x78\x84\x35\x1a\xdd\x12\x42\x87\xd0\xc5\x8e\x4b\x92\x22\xc7\x1a\x41\xaf\x2b\x04\x62\x1d\x58\x0c\x7a\x70\x62\xdf\x5c\x54\x11\xc4\xca\xa3\x94\x14\xa6\x7c\x43\xa0\x2b\xf2\x7d\x45\xf0\x7b\x0c\x64\x75\xf5\x46\x0c\xa0\x64\x6e\xe8\x4e\xa9\xae\xeb\xd2\x6a\x5f\xa6\xd6\xab\xc6\x13\x93\x2a\xbc\x63\x89\xdf\x1b\x4f\x28\xb9\x44\x79\x98\x47\x1e\xe6\x91\xce\xb3\xc4\x3d\x3a\xc9\x5e\x6a\x79\xe6\x4d\x4b\xae\x2b\x31\xb8\x22\x0c\x68\x7c\x5d\xa3\x2b\xb0\xb8\xa6\xfb\xd6\x20\xeb\xa7\x27\x9f\x6e\x2d\x97\xed\x3a\xd2\xfe\x74\xfb\xf6\x17\x75\xfb\xab\xba\xfd\x59\x15\xbe\x27\x68\xe9\x4c\x6b\xdd\xe9\xdf\xc6\x07\x69\xac\x12\x03\x18\x13\x68\x08\x48\x6d\xc5\x6f\x0e\x1e\x5e\x5e\xa5\xd4\x04\xc1\x7b\x3e\xbd\xcc\xd1\x8e\x80\xb5\x67\x84\x7d\x43\xcf\xd3\x11\x5a\x07\xb2\x80\xbf\xfb\x00\xca\x06\x92\x61\xdc\xbc\xe4\x2e\xae\xde\xe9\x74\x0f\x6a\xaf\x83\x0a\xad\x53\x87\xae\x34\x7a\x71\xf7\xda\xe1\xa5\xa5\x0f\xcf\x9d\xd2\x4d\xa3\xfa\x54\x1c\x2f\x10\xe2\xf9\xa8\xbf\xbd\x9c\x2d\x16\xf7\xab\xcf\x59\xfe\x67\xb6\xba\xcf\x17\xcb\xc5\xe8\xe6\xdc\xa7\x52\xa2\x52\xed\x9c\xef\xdc\x2a\x7e\xd3\xcd\xa9\x4b\xc6\x45\x85\xe4\xd9\xa6\x1e\xef\x92\xff\xc5\x3d\x89\xf1\x7d\x45\x55\xed\x5b\xc7\x74\xcc\xed\x69\x03\x80\xfc\x75\xee\x8c\x76\x27\x33\x2d\x8b\xff\x02\x00\x00\xff\xff\x60\x45\x75\x60\xfa\x04\x00\x00")

func cmdBootstrapDaemonUpShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapDaemonUpSh,
		"cmd/bootstrap/daemon-up.sh",
	)
}

func cmdBootstrapDaemonUpSh() (*asset, error) {
	bytes, err := cmdBootstrapDaemonUpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/daemon-up.sh", size: 1297, mode: os.FileMode(493), modTime: time.Unix(1515333898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5b\x6f\xd3\x40\x10\x85\xdf\xf7\x57\x9c\x36\x51\x2f\x52\x6d\xb7\x11\xe2\x81\xaa\x48\x90\x46\x08\x51\x29\x52\x2e\xcf\x68\xe3\x9d\x8d\x57\x75\x76\xcd\xce\x98\x10\x21\xfe\x3b\xb2\x63\x1b\x0a\xe5\xe2\xa7\xf5\xce\x99\xd9\x6f\xce\xcc\xe8\x24\xdb\x38\x9f\x71\xa1\xd4\x08\x6f\x43\x10\x96\xa8\x2b\x86\xc6\x4e\xe7\x85\xf3\x04\x1b\x22\x4c\xc8\x1f\x29\x42\x7b\xd3\x1d\x93\x3c\xec\xaa\xc0\x94\xaa\x11\x56\x85\x63\x38\x46\x15\x49\xe4\x00\x5d\x56\x85\x4e\xf1\xde\xb3\xe8\xb2\x64\xe4\x75\x2c\x11\x7c\x79\x80\xb3\x70\x02\x13\x88\xfd\xb9\x80\xbe\x38\x96\x36\x9f\x58\xc8\x20\x78\xac\x37\xb5\x97\x1a\x37\x2f\xd3\xeb\x17\x57\x88\xf4\xa9\x76\x91\x18\x5c\x9b\xd0\x62\x68\x58\xda\x83\x85\x2a\x4e\x95\x62\x12\x24\xa4\xd4\xfd\x7c\xfa\x61\xb6\xf8\xb8\x9c\xaf\x17\xd3\xd9\xdd\x96\x24\x3d\x32\xa6\x79\xd8\xf5\xc1\xfb\xd9\x72\x75\x77\x9e\xc9\xae\xca\xb6\x24\x49\x27\xe0\xe2\xbc\x69\x7b\x5a\x50\xfe\xd8\xd0\xf5\x6d\x46\xd2\xe6\x00\x77\xec\x80\x4c\xaa\x9c\x45\xa1\xb9\xe8\x05\x93\xd7\x99\xa1\xcf\x99\xaf\xcb\xf2\x16\x52\x90\x57\x00\x9a\x86\x04\xd7\xca\xba\x5b\xa5\x2c\x49\x5e\x58\x57\xd2\xc5\x25\xbe\xb6\xd1\x11\xde\xc4\x2d\xbf\xea\xce\xc0\xf8\x06\x1c\xea\x98\x13\xd6\x8b\x87\x1f\xb7\x13\x18\x62\x71\x5e\x8b\x0b\x1e\x4d\x85\xb4\x0d\xf6\x04\xad\x9b\xcf\xbf\xdf\x7c\xad\x55\xad\x26\xb1\xbc\x7c\x68\x5e\x49\x02\x4e\xc7\x93\xd3\x23\x62\xd9\xd7\xd9\x6f\x49\xfe\x55\xa7\xd5\x24\xf3\x36\x1d\xe3\x9b\xae\x02\xd3\xa0\x8a\x24\x75\xf4\x38\x46\x9a\xbe\xbf\x35\x76\xbe\x23\xe9\x8d\x7a\x76\xe2\xce\xe2\xe4\xe2\x0f\x76\x5e\xfe\xc4\x31\xc2\x2a\x1e\x20\x01\x26\xec\x7d\x19\xb4\x41\xcd\xce\x6f\xbb\x85\x8a\x2d\xde\x55\xa7\xdc\x90\x0d\x91\x10\x89\x43\x94\x46\x24\xa1\x9f\x5f\x9f\x32\xf8\x38\xcc\x06\xe3\x27\xab\x33\xfc\x36\xcb\xf2\xab\x1f\xc5\x93\xe8\xef\x56\xe8\x4a\x92\xc6\xae\xba\x32\x5a\x08\x67\x67\xc3\x4d\x32\x6c\x52\x8b\x31\x64\xfc\x17\xc6\x5f\x01\xac\x53\xd6\xa9\xef\x01\x00\x00\xff\xff\x70\x6c\x7b\xfa\xc2\x03\x00\x00")

func cmdBootstrapDockerShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapDockerSh,
		"cmd/bootstrap/docker.sh",
	)
}

func cmdBootstrapDockerSh() (*asset, error) {
	bytes, err := cmdBootstrapDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/docker.sh", size: 962, mode: os.FileMode(493), modTime: time.Unix(1515277351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xdc\x30\x10\x46\xef\xf3\x2b\xbe\xb0\x81\x5c\x2a\xef\xbd\xa1\x0b\x6d\x13\xda\x3d\x74\x13\x68\x7a\x2a\xc5\x68\xad\x71\x34\xd8\x91\x8c\x66\xdc\xad\x2f\xfd\xed\xc5\xeb\xa5\x24\x64\x2f\xd1\x55\x6f\x78\x4f\x9a\xd5\xc5\x7a\x2f\x69\xad\x91\x68\x85\xfb\x92\xc3\xd8\xb0\xc2\x63\x18\xf7\xbd\x34\x6e\x28\xf2\xdb\x1b\xa3\xe3\xc9\x0d\x5e\x0a\x7c\x0a\xc8\xa3\x0d\xa3\x29\x2c\xf2\x89\x9b\xef\x2b\x22\x65\x83\x63\xa2\xed\x4d\x7d\x73\xfb\xfd\x61\xbb\xfb\xf8\xb0\xbd\xdb\x7d\xb8\xfc\x7a\xf7\xed\x76\x5d\xa9\xc6\xb5\x84\xba\xa8\xaf\x25\x71\x31\xf1\x75\xe0\xa1\xcf\x13\xdd\xff\xf8\x54\xbf\x71\xa6\x1a\xc6\xfd\x9c\xfc\x39\x72\xd3\x41\x5a\x04\x56\x93\xe4\x4d\x72\x42\x2b\x3d\xc3\xf7\x85\x7d\x98\xc0\x7f\x44\x4d\xdf\x93\xb4\xf8\x09\xd7\xe2\xf2\xa5\x09\xbf\xae\xe7\x87\x24\x02\x80\x23\x73\x71\xa4\x5e\x37\xbd\x20\xe7\xb3\xc2\xb6\x7d\xf6\x01\x08\x99\x35\xd9\x22\x7c\x87\x27\xdf\x31\xc4\xaa\xff\xb8\x6a\x74\x1d\x4f\x8f\x9c\xe0\xa6\x73\x25\x9b\x73\xd6\xe3\x78\x2b\xd7\xc4\xbd\x32\x2d\xda\x2f\x9c\xb8\x9c\xd6\x82\x83\x58\x44\xca\x18\xbc\xea\x21\x97\xb0\x08\x9f\xcb\x5e\x9b\x9c\xa1\xa8\x87\xdb\xe1\xea\x8a\x5a\x21\x3a\xe1\xda\xf8\x84\x47\xb1\x38\xee\xab\x26\x3f\x61\xb3\xc1\xdf\x65\x09\x5d\xca\x87\x54\xc7\xac\xa6\x44\x8d\xb7\xb3\xa9\xff\x02\x00\x00\xff\xff\x37\x00\x91\x4b\x4d\x02\x00\x00")

func cmdBootstrapKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapKeygenSh,
		"cmd/bootstrap/keygen.sh",
	)
}

func cmdBootstrapKeygenSh() (*asset, error) {
	bytes, err := cmdBootstrapKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/keygen.sh", size: 589, mode: os.FileMode(493), modTime: time.Unix(1515333605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapTokenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x9e\x54\xe8\x69\xbb\x77\x21\x07\x11\x31\x45\x6d\x84\x08\x5e\x84\xb0\x4d\x46\x77\x89\x9d\x8d\x3b\xb3\x16\xff\xbd\x44\x1a\xed\x71\xe6\x9b\xef\x31\x6f\x75\xe1\xf6\x91\x9d\x04\x63\x84\x14\x96\x8c\x59\xe1\x8e\x98\xb2\x57\x12\x78\x46\xdb\xd6\xd0\x34\x12\xe3\x2d\x65\x14\x21\x1c\xa3\x06\x5c\x3f\x6d\x91\xe9\xb3\x90\xa8\x6c\xce\x1c\x78\x0c\x9e\x0e\x89\x4f\x52\x91\xc8\xef\xb8\x79\xd8\x6e\x8c\x94\x21\x61\x48\xfd\x48\x19\xb9\x30\xac\xcd\x07\xbc\x1a\x00\xb0\x5f\xb8\xac\x9b\xc7\xdb\x2b\xe7\xa7\xc9\x85\x24\xba\x00\x9a\x1f\xe8\xee\x77\xcd\xcb\xae\xab\x9b\xf6\xb9\xad\xd6\x7f\x37\x6e\x23\x12\xdc\xc8\xe9\xc8\xdd\x3c\xcb\xfa\xdf\x9a\xd3\xaa\xdf\xcc\x65\x67\x89\x35\x7f\x4f\x29\xb2\x56\x91\x29\x6b\xf4\x27\x54\xf6\xfd\x87\x2f\xdc\x87\xc9\x0f\x6e\x41\xe7\x2d\xcc\x4f\x00\x00\x00\xff\xff\x5f\x07\x1a\x29\x27\x01\x00\x00")

func cmdBootstrapTokenShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapTokenSh,
		"cmd/bootstrap/token.sh",
	)
}

func cmdBootstrapTokenSh() (*asset, error) {
	bytes, err := cmdBootstrapTokenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/token.sh", size: 295, mode: os.FileMode(493), modTime: time.Unix(1515333296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/bootstrap/daemon-down.sh": cmdBootstrapDaemonDownSh,
	"cmd/bootstrap/daemon-up.sh":   cmdBootstrapDaemonUpSh,
	"cmd/bootstrap/docker.sh":      cmdBootstrapDockerSh,
	"cmd/bootstrap/keygen.sh":      cmdBootstrapKeygenSh,
	"cmd/bootstrap/token.sh":       cmdBootstrapTokenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"bootstrap": &bintree{nil, map[string]*bintree{
			"daemon-down.sh": &bintree{cmdBootstrapDaemonDownSh, map[string]*bintree{}},
			"daemon-up.sh":   &bintree{cmdBootstrapDaemonUpSh, map[string]*bintree{}},
			"docker.sh":      &bintree{cmdBootstrapDockerSh, map[string]*bintree{}},
			"keygen.sh":      &bintree{cmdBootstrapKeygenSh, map[string]*bintree{}},
			"token.sh":       &bintree{cmdBootstrapTokenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
