// Code generated by go-bindata.
// sources:
// cmd/bootstrap/daemon-down.sh
// cmd/bootstrap/daemon-up.sh
// cmd/bootstrap/docker.sh
// cmd/bootstrap/keygen.sh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdBootstrapDaemonDownSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4a\xc3\x40\x10\x86\xef\xfb\x14\x3f\x4d\x0f\x7a\xd8\x3c\x40\x21\x87\x68\x83\x08\x36\x42\xa9\x07\x4f\xed\x9a\x9d\x24\x43\x9a\xdd\x38\x3b\x45\x7d\x7b\x89\xa1\x50\x3c\x0e\xcc\xf7\x7d\xfc\x19\x1e\x5c\xe2\x06\xa9\x11\x9e\x14\x6d\x14\x7c\x08\x87\x8e\x43\x07\x1f\xbf\x02\xb4\x27\x78\x47\x63\x0c\xb9\x31\x19\x4a\xe9\xd2\xc6\x64\x00\x30\x45\x51\xdc\x71\xd0\xfb\x0d\x0e\x3d\x2d\xb7\x46\xc8\x65\xa1\x84\xc6\xa8\x57\x18\x7f\xbc\x49\xa4\xb0\x64\xcc\xb6\xac\x76\xaf\xf5\xb1\x2e\x77\x55\xc1\x81\x44\xd9\xd9\xe5\x71\x8e\x3c\xf6\xd4\x0c\xe0\x16\xee\x2c\xe4\xfc\xcf\xac\x0c\x1c\xba\xdc\x94\x2f\xfb\xaa\xdc\xbe\x1f\xf7\x6f\x75\xfd\x5c\x3f\x15\xa7\x74\xf1\x11\x3e\x36\x03\x09\xa6\x04\xfb\x09\x6b\x5b\x3e\x2b\x09\x56\xc1\x8d\x54\xac\x6f\x52\xab\xd3\x6c\x3f\xb8\x81\x40\xdf\x9c\xf4\x3a\x32\x37\xb7\x1a\x19\x61\x5b\xac\xff\xa5\x7e\x03\x00\x00\xff\xff\x7d\x81\x0f\xfa\x29\x01\x00\x00")

func cmdBootstrapDaemonDownShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapDaemonDownSh,
		"cmd/bootstrap/daemon-down.sh",
	)
}

func cmdBootstrapDaemonDownSh() (*asset, error) {
	bytes, err := cmdBootstrapDaemonDownShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/daemon-down.sh", size: 297, mode: os.FileMode(420), modTime: time.Unix(1513475146, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapDaemonUpSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x4d\x8f\xda\x30\x10\x86\xef\xfe\x15\x6f\x0d\x95\xda\x83\xd3\x3b\x28\x87\xb4\xa0\xaa\x6a\x09\x55\x44\x0f\xd5\xee\x0a\x8c\xe3\x24\x16\xc9\x38\x6b\x3b\xda\x8f\x5f\xbf\x72\x80\x5d\xe0\x64\x59\x33\xcf\x3b\xf3\xcc\x04\xdf\xa5\x37\x0a\x5e\x39\xd3\x07\x54\xd6\x61\xef\x0c\xd5\x86\x6a\x0c\x3d\x42\xa3\x51\x4a\xdd\x59\x4a\x18\x9b\x20\x73\xb5\x9f\xb1\x09\x00\xf4\xd6\x05\x7c\x31\x14\xbe\xce\xb0\x69\xf4\xf1\x1f\x2c\xdc\x40\x23\xe5\x74\x67\xc3\x19\xc6\xc8\x7b\x1d\x20\x34\x63\x7f\xd7\xc5\x26\xfd\xec\xd9\x22\x5b\xae\xd6\xf9\x36\xcf\x56\xcb\xd4\x90\x76\xc1\x48\x71\xec\x8f\xb3\x7e\x34\x5a\x1d\x60\x2a\xc8\xd6\x69\x59\xbe\xc4\x64\x32\x54\x27\x2c\xfb\x53\x2c\xb3\xc5\xff\x6d\xf1\x2f\xcf\x7f\xe5\x3f\xd3\x9d\x1f\x4a\x8b\xd2\xaa\x83\x76\xe8\x3d\xc4\x23\x84\xa8\x4c\x1b\xb4\x03\x27\xd9\xe9\x74\x7a\x31\x8a\xef\x62\xfa\x46\x1e\x34\xf4\xb3\xf1\x21\x9a\x96\xf6\x89\x12\x66\x2a\xdc\xe1\x13\xc4\x2b\xf8\xf4\x66\x06\xc7\xc3\x3c\x6a\x11\x8b\xee\x5a\x35\x16\xfc\xb7\x69\xdb\x08\xbf\xa7\x28\x4b\x41\x46\x11\x3e\x76\x5d\x6e\xe5\x3a\x88\x0a\xb7\xa9\xac\x32\xf3\xb8\x4c\x31\xd0\x07\x9c\xb0\x2b\x70\x20\x88\x12\xf7\x63\xa2\xe8\xc1\xa7\xf1\x7a\x7c\x76\x7a\xcf\x05\x11\x35\xc1\xaf\x3c\x4f\xb5\x61\xaf\x5a\x39\x90\x6a\x7a\x59\x7e\x3b\x9d\xf9\x2d\x00\x00\xff\xff\xe7\x82\x39\xd0\xf6\x01\x00\x00")

func cmdBootstrapDaemonUpShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapDaemonUpSh,
		"cmd/bootstrap/daemon-up.sh",
	)
}

func cmdBootstrapDaemonUpSh() (*asset, error) {
	bytes, err := cmdBootstrapDaemonUpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/daemon-up.sh", size: 502, mode: os.FileMode(420), modTime: time.Unix(1513474606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x6f\x4f\xdb\x3e\x10\xc7\x9f\xfb\x55\x1c\xb4\xa2\xa0\x1f\x89\x29\xfa\x69\x93\x40\x4c\xda\x4a\x35\x4d\x63\xeb\x44\xe1\xf1\x70\x93\x4b\x6d\x91\xd8\x99\xef\xd2\x52\x4d\x7b\xef\x93\xdd\x24\xa3\xc0\xfe\xe4\x91\xe3\xfb\xde\xf9\xe3\xef\x9d\x07\x7b\x72\x61\xac\x24\x2d\xc4\x00\xde\x39\xc7\xc4\x5e\xd5\x04\x0a\x2a\x95\x69\x63\x11\x0a\xe7\x21\x77\xd9\x3d\x7a\x50\x36\x6f\x97\x49\xe6\xaa\xda\x11\xa6\x62\x00\x37\xda\x10\x18\x82\xda\x23\xf3\x06\x54\x59\x6b\x95\xc2\x07\x4b\xac\xca\x92\x20\x6b\x7c\x09\xce\x96\x1b\x30\x05\x18\x86\xdc\x21\xd9\x11\x03\x3e\x18\xe2\x98\x8f\xc4\x98\x83\xb3\x70\xbb\x68\x2c\x37\x30\x7e\x95\x9e\xfc\x7f\x0c\x1e\xbf\x35\xc6\x23\x01\x35\xb9\x8b\x18\x0a\x0a\x5c\x03\x31\xd6\x94\x0a\x41\xc8\x90\xa0\x10\x97\xb3\xc9\xc7\xe9\xf5\xd7\xf9\xec\xf6\x7a\x32\xbd\x58\x22\xa7\x5b\xc6\x34\x73\x55\x17\xbc\x9c\xce\x6f\x2e\x46\x92\xab\x5a\x2e\x91\x93\x56\x40\x7a\xd4\x09\x26\xb3\x4f\x5f\x66\xf3\x69\x57\x45\x33\xd7\x74\x26\xe5\xd2\xb0\x6e\x16\xa1\x92\xdc\xe6\xc8\xf6\xe2\xd2\x63\x89\x8a\x90\x64\xee\xd6\xb6\x74\x2a\x97\xe3\x74\xfc\x3a\x3d\x91\xbb\x06\x25\x77\x8d\x55\x15\x42\x42\x77\xfd\xb2\xba\x7b\x7a\x6a\x8b\xd7\x90\x97\xa5\xcb\x54\x19\x7b\xb2\x5b\x68\x14\x1a\x34\xd1\x98\xdd\x07\x1f\x5b\x98\x5d\x09\x28\x8f\x2a\xdf\x74\xce\x9a\x02\xb4\x22\xdd\x35\xef\xf4\x8d\xcc\x71\x25\x6d\x53\x96\x70\x70\xf0\x38\xd4\xe7\x3f\x92\x9c\x03\x6b\xb4\x02\x00\x42\x39\x86\x13\x51\x98\x73\x21\x0a\xe4\x4c\x17\xa6\xc4\xc3\x23\xf8\x1e\xa3\x03\x78\xeb\x97\x74\xd6\xae\x01\x86\x63\x20\xd7\xf8\x0c\xe1\xf6\xfa\xea\xd7\xee\x29\xe4\x48\x6c\xac\x62\xe3\x2c\x84\x0a\x69\x0c\x76\x90\x71\x4a\x5e\x3e\x3f\x7c\x71\x04\xa2\x26\x29\x68\x7e\x15\x4e\x49\x1c\xec\x0f\x4f\xf7\xb7\x88\x65\x57\x67\xbd\x44\xfe\x5b\x9d\xa8\x49\x66\x31\x1d\x86\xe3\xb6\x02\x61\xaf\xf2\xc8\x8d\xb7\xb0\x8d\x84\x7b\xff\x08\xe6\xbf\x47\xee\xbc\x7c\x71\x92\x4d\x01\x7b\x87\xbf\x71\xfc\xe8\x11\xc7\x00\x6e\xfc\x06\xd8\x41\x37\x39\xd0\x90\xb1\xcb\xf6\xa1\xf8\x88\x77\xdc\x2a\x17\x58\x38\x8f\xe0\x91\x9c\xe7\x20\x62\x07\x66\xfb\xb2\xba\x94\xde\xc7\xbe\x37\x30\xdc\x79\x12\xfd\x6f\x98\xb2\xa7\x7e\xe8\x9d\xe8\x73\x2b\x54\xcd\x49\xb0\xab\xa9\x73\xc5\x18\x06\xa7\xdb\x49\x36\x1d\x49\xc4\xe8\x33\xfe\x09\xe3\x8f\x00\x85\x11\x85\x09\x8e\x7f\x76\x6b\x58\xf6\xae\xf7\x63\x9a\x84\xdb\xae\x71\xb4\x42\xa8\x54\x8e\xa1\x15\xac\x0d\x89\x01\x14\xca\x1f\xc3\x1a\x41\xab\x15\xee\xf8\xd9\xa1\x62\x9e\x8a\xe7\x80\xbb\x8f\xff\xd9\x76\x04\xdb\x4e\xa0\xae\x5c\x0e\xff\x3d\xbc\x2c\x11\xdb\xce\xc6\x6e\xa6\xe2\x29\x74\xb2\x42\x4f\xc6\x59\xf1\x33\x00\x00\xff\xff\x57\x8f\x32\x6e\x73\x05\x00\x00")

func cmdBootstrapDockerShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapDockerSh,
		"cmd/bootstrap/docker.sh",
	)
}

func cmdBootstrapDockerSh() (*asset, error) {
	bytes, err := cmdBootstrapDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/docker.sh", size: 1395, mode: os.FileMode(493), modTime: time.Unix(1513472391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6f\xda\x40\x10\x85\xef\xf3\x2b\x1e\x02\x89\x4b\xd7\xbe\x17\xb5\x52\x5b\x50\xeb\x43\x01\x29\xe4\x14\x45\xd6\xe2\x1d\xc7\x23\x3b\x6b\x6b\x67\x1d\xe2\x7f\x1f\x19\x50\x04\x82\x4b\xf6\xba\xdf\xd3\xf7\x66\x66\x3a\x49\xf7\xe2\x53\xad\x88\xa6\xd8\x86\xd6\xf5\x05\x2b\x2c\xba\x7e\xdf\x48\x61\xba\x20\x6f\x36\x32\x6a\x1e\x4c\x67\x25\xc0\x7a\x87\xb6\x8f\x5d\x1f\x15\xb1\xe2\x33\x37\xfe\x27\x44\xca\x11\x86\x89\xb2\x65\xbe\x5c\x3d\xec\xb2\xf5\xaf\x5d\xb6\x59\xff\x98\xfd\xdb\xfc\x5f\xa5\x89\x6a\x95\x8a\xcb\x83\xda\x5c\x3c\x87\x28\x36\x77\xdc\x35\xed\x40\xdb\xc7\xdf\xf9\x17\x33\x49\xd7\xef\xc7\xca\x7f\x2a\x2e\x6a\x48\x09\xc7\x1a\xc5\xdb\x28\xad\x47\x29\x0d\xc3\x36\x81\xad\x1b\xc0\xef\xa2\x51\xbf\x93\x94\x78\x82\x29\x31\xbb\x36\xe1\x79\x31\x0e\xe2\x09\x00\x8e\xcc\xe4\x48\xdd\x76\xba\x22\xc7\x37\x45\x56\x5e\x2c\x00\xae\x65\xf5\xf1\x24\xfc\x86\x57\x5b\x33\x24\x26\x9f\xb8\x6a\x65\x6a\x1e\x5e\xd8\xc3\x0c\xf7\x9a\xfc\xbc\x67\x3d\xc6\x4b\x59\x10\x37\xca\x74\xd2\xfe\x65\xcf\xe1\x7c\x16\x1c\x24\x56\xf0\x2d\x3a\xab\x7a\x68\x83\x3b\x09\x2f\x65\xb7\x26\x13\x11\xd4\xc2\xac\x31\x9f\x53\x29\x44\x54\xd8\x78\xd7\xfe\x11\x00\x00\xff\xff\x66\x70\xb4\x8a\x20\x02\x00\x00")

func cmdBootstrapKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapKeygenSh,
		"cmd/bootstrap/keygen.sh",
	)
}

func cmdBootstrapKeygenSh() (*asset, error) {
	bytes, err := cmdBootstrapKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/keygen.sh", size: 544, mode: os.FileMode(493), modTime: time.Unix(1513459024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/bootstrap/daemon-down.sh": cmdBootstrapDaemonDownSh,
	"cmd/bootstrap/daemon-up.sh":   cmdBootstrapDaemonUpSh,
	"cmd/bootstrap/docker.sh":      cmdBootstrapDockerSh,
	"cmd/bootstrap/keygen.sh":      cmdBootstrapKeygenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"bootstrap": &bintree{nil, map[string]*bintree{
			"daemon-down.sh": &bintree{cmdBootstrapDaemonDownSh, map[string]*bintree{}},
			"daemon-up.sh":   &bintree{cmdBootstrapDaemonUpSh, map[string]*bintree{}},
			"docker.sh":      &bintree{cmdBootstrapDockerSh, map[string]*bintree{}},
			"keygen.sh":      &bintree{cmdBootstrapKeygenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
