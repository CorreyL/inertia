// Code generated by go-bindata.
// sources:
// cmd/bootstrap/docker.sh
// cmd/bootstrap/keygen.sh
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdBootstrapDockerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xe1\x4f\xdb\x48\x10\xc5\xbf\xef\x5f\xf1\x20\x11\x01\x1d\xb6\x09\x3a\xdd\x49\x20\x4e\xba\x83\xe8\x74\x3a\xda\x54\x04\x3e\x97\x8d\x3d\x8e\x57\xb5\x77\xdd\x9d\x71\x42\x54\xf5\x7f\xaf\xbc\xb1\x5d\x02\xa8\x6d\x3e\x6d\x76\xde\x8c\x7f\x7e\xf3\x3c\x3a\x48\x96\xc6\x26\x5c\x28\x35\xc2\x3f\xce\x09\x8b\xd7\x35\x43\xa3\xd2\x69\x61\x2c\x21\x77\x1e\x99\x4b\x3f\x91\x87\xb6\x59\x77\x8c\x52\x57\xd5\x8e\x29\x56\x23\xdc\x17\x86\x61\x18\xb5\x27\x91\x2d\x74\x59\x17\x3a\xc6\x7f\x96\x45\x97\x25\x23\x6d\x7c\x09\x67\xcb\x2d\x4c\x0e\x23\xc8\x1c\xb1\x9d\x08\xe8\xc9\xb0\x84\x7e\x62\xa1\x0c\xce\xe2\x61\xd9\x58\x69\x30\xfd\x23\x3e\xfb\xfd\x14\x9e\x3e\x37\xc6\x13\x83\x9b\xcc\x05\x0c\x8d\x9c\x36\x60\xa1\x9a\x63\xa5\x98\x04\x11\x29\x75\x33\xbf\xfe\x7f\x76\xf7\x71\x31\x7f\xb8\xbb\x9e\x5d\xad\x48\xe2\x1d\x63\x9c\xba\xaa\x2f\xde\xcc\x16\xf7\x57\x93\x44\xaa\x3a\x59\x91\x44\x9d\x80\x8b\x49\x2f\xb8\x9e\xbf\xfb\x30\x5f\xcc\xfa\x29\x85\x48\xcd\x17\x49\xb2\x32\x52\x34\xcb\x76\x52\xb2\xeb\x49\xba\x17\x4f\x3c\x95\xa4\x99\x38\xc9\xdc\xc6\x96\x4e\x67\xc9\x34\x9e\xfe\x19\x9f\x25\xfb\x06\x45\x8f\x8d\xd5\x15\x21\xe2\xc7\xe1\x58\x3d\xbe\x7c\x6a\x87\xd7\xb0\x4f\x4a\x97\xea\x32\xec\x64\x7f\xd0\x44\xa9\x9c\x24\x2d\x72\x53\xd2\xf1\x09\xbe\x28\x00\x18\xe1\x6f\xbf\xe2\x8b\xee\x0c\x8c\xa7\x60\xd7\xf8\x94\xf0\x70\x77\xfb\xfd\xf6\x1c\x19\xb1\x18\xab\xc5\x38\x8b\x76\x42\x1c\x8a\x26\x47\xa1\xb9\xd8\xad\xe8\xfc\xaf\x24\xa3\x75\x62\x9b\xb2\xbc\x84\x14\x64\x83\xa4\xfd\x05\xff\x83\x26\xca\x79\x71\xdb\x3e\x25\x72\x38\x1c\x9f\x1f\x06\x09\x95\xfd\x9c\xcd\x8a\xe4\x67\x73\x82\x26\x9a\x87\x76\x8c\xa7\xdd\x04\xa6\x41\xe5\x49\x1a\x6f\xb1\xab\xe4\xe6\x52\x7d\x6d\xa3\xf9\x2f\x49\x9f\xc2\x37\x63\x64\x72\x1c\x1c\x07\x88\x4e\xf5\x0c\xe3\xe4\x19\xc7\x08\xf7\x7e\x0b\x71\xe8\xd7\x86\x86\x8d\x5d\x75\x29\xf5\x01\xef\xb4\x53\x2e\x29\x77\x9e\xe0\x89\x9d\x97\x56\x24\x0e\x66\x17\xeb\xbe\x65\xf0\x71\xd8\x0d\xc6\x7b\x79\x1c\xfe\xb6\x2b\x7e\xe9\x47\xb1\x57\x7d\x6d\x85\xae\x25\x6a\xed\x6a\xea\x4c\x0b\xe1\xe8\x68\xb8\x89\xb6\x3d\x49\xc0\x18\x3a\x7e\x09\xe3\x87\x00\xb9\x51\xb9\x69\x1d\x7f\xef\x36\x58\x0d\xae\xf7\x31\x44\xd4\xbe\xed\x86\x26\x6b\x42\xa5\x33\x6a\x57\x21\x85\x61\x35\x42\xae\xfd\x29\x36\x84\x42\xaf\x69\xcf\xcf\x1e\x95\xb2\x58\xbd\x06\xdc\xff\xf2\x5e\x5d\x07\xb0\x5d\x02\x8b\xca\x65\xf8\xed\xe9\x6d\x89\xda\x6d\x36\x6c\x33\x56\x2f\xa1\xa3\x35\x79\x36\xce\xaa\x6f\x01\x00\x00\xff\xff\x17\xd8\x4a\x17\xf0\x04\x00\x00")

func cmdBootstrapDockerShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapDockerSh,
		"cmd/bootstrap/docker.sh",
	)
}

func cmdBootstrapDockerSh() (*asset, error) {
	bytes, err := cmdBootstrapDockerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/docker.sh", size: 1264, mode: os.FileMode(493), modTime: time.Unix(1512975414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdBootstrapKeygenSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6f\xda\x40\x10\x85\xef\xf3\x2b\x1e\x02\x89\x4b\xd7\xbe\x17\xb5\x52\x5b\x50\xeb\x43\x01\x29\xe4\x14\x45\xd6\xe2\x1d\xc7\x23\x3b\x6b\x6b\x67\x1d\xe2\x7f\x1f\x19\x50\x04\x82\x4b\xf6\xba\xdf\xd3\xf7\x66\x66\x3a\x49\xf7\xe2\x53\xad\x88\xa6\xd8\x86\xd6\xf5\x05\x2b\x2c\xba\x7e\xdf\x48\x61\xba\x20\x6f\x36\x32\x6a\x1e\x4c\x67\x25\xc0\x7a\x87\xb6\x8f\x5d\x1f\x15\xb1\xe2\x33\x37\xfe\x27\x44\xca\x11\x86\x89\xb2\x65\xbe\x5c\x3d\xec\xb2\xf5\xaf\x5d\xb6\x59\xff\x98\xfd\xdb\xfc\x5f\xa5\x89\x6a\x95\x8a\xcb\x83\xda\x5c\x3c\x87\x28\x36\x77\xdc\x35\xed\x40\xdb\xc7\xdf\xf9\x17\x33\x49\xd7\xef\xc7\xca\x7f\x2a\x2e\x6a\x48\x09\xc7\x1a\xc5\xdb\x28\xad\x47\x29\x0d\xc3\x36\x81\xad\x1b\xc0\xef\xa2\x51\xbf\x93\x94\x78\x82\x29\x31\xbb\x36\xe1\x79\x31\x0e\xe2\x09\x00\x8e\xcc\xe4\x48\xdd\x76\xba\x22\xc7\x37\x45\x56\x5e\x2c\x00\xae\x65\xf5\xf1\x24\xfc\x86\x57\x5b\x33\x24\x26\x9f\xb8\x6a\x65\x6a\x1e\x5e\xd8\xc3\x0c\xf7\x9a\xfc\xbc\x67\x3d\xc6\x4b\x59\x10\x37\xca\x74\xd2\xfe\x65\xcf\xe1\x7c\x16\x1c\x24\x56\xf0\x2d\x3a\xab\x7a\x68\x83\x3b\x09\x2f\x65\xb7\x26\x13\x11\xd4\xc2\xac\x31\x9f\x53\x29\x44\x54\xd8\x78\xd7\xfe\x11\x00\x00\xff\xff\x66\x70\xb4\x8a\x20\x02\x00\x00")

func cmdBootstrapKeygenShBytes() ([]byte, error) {
	return bindataRead(
		_cmdBootstrapKeygenSh,
		"cmd/bootstrap/keygen.sh",
	)
}

func cmdBootstrapKeygenSh() (*asset, error) {
	bytes, err := cmdBootstrapKeygenShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/bootstrap/keygen.sh", size: 544, mode: os.FileMode(493), modTime: time.Unix(1513459024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/bootstrap/docker.sh": cmdBootstrapDockerSh,
	"cmd/bootstrap/keygen.sh": cmdBootstrapKeygenSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"bootstrap": &bintree{nil, map[string]*bintree{
			"docker.sh": &bintree{cmdBootstrapDockerSh, map[string]*bintree{}},
			"keygen.sh": &bintree{cmdBootstrapKeygenSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
